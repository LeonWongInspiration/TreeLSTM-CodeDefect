  public boolean saveSettings() {//throws IOException {
    boolean projRootChanged = false;

    File pr = _projRootSelector.getFileFromField();
    if (!pr.equals(_model.getProjectRoot())) {
      _model.setProjectRoot(pr);
      projRootChanged = true;
    }

    File bd = _buildDirSelector.getFileFromField();
    if (_buildDirSelector.getFileField().getText().equals("")) bd = FileOps.NULL_FILE;
    _model.setBuildDirectory(bd);

    File wd = _workDirSelector.getFileFromField();
    if (_workDirSelector.getFileField().getText().equals("")) wd = FileOps.NULL_FILE;
    _model.setWorkingDirectory(wd);

    File mc = _mainDocumentSelector.getFileFromField();
    if (_mainDocumentSelector.getFileField().getText().equals("")) mc = FileOps.NULL_FILE;
    _model.setMainClass(mc);

    _model.setExtraClassPath(IterUtil.snapshot(extras));

    _model.setAutoRefreshStatus(_autoRefreshComponent.isSelected());

    _model.setExcludedFiles(_excludedFilesList.getValue().toArray(new File[0]));
    
    if (projRootChanged) {
      try {
        _model.reloadProject(_mainFrame.getCurrentProject(), _mainFrame.gatherProjectDocInfo());
      } catch(IOException e) { throw new edu.rice.cs.util.UnexpectedException(e, "I/O error while reloading project"); }
    }
    return true;
  }

  /** Returns the current project root in the project profile. */
  private File _getProjRoot() {
    File projRoot = _model.getProjectRoot();
    if (projRoot != null) return projRoot;
    return FileOps.NULL_FILE;
  }

  /** Returns the current build directory in the project profile. */
  private File _getBuildDir() {
    File buildDir = _model.getBuildDirectory();
    if (buildDir != null) return buildDir;
    return FileOps.NULL_FILE;
  }

  /** Returns the current working directory in the project profile (FileOption.NULL_FILE if none is set) */
  private File _getWorkDir() {
    File workDir = _model.getWorkingDirectory();
    if (workDir != null) return workDir;
    return FileOps.NULL_FILE;
  }

  /** Returns the current working directory in the project profile (FileOption.NULL_FILE if none is set) */
  private File _getMainFile() {
    File mainFile = _model.getMainClass();
    if (mainFile != null) return mainFile;
    return FileOps.NULL_FILE;
  }
  
  /** Returns whether the project is set to automatically open new source files */
  private boolean _getAutoRefreshStatus() {
    return _model.getAutoRefreshStatus();
  }

  private void _setupPanel(JPanel panel) {
    GridBagLayout gridbag = new GridBagLayout();
    GridBagConstraints c = new GridBagConstraints();
    panel.setLayout(gridbag);
    c.fill = GridBagConstraints.HORIZONTAL;
    Insets labelInsets = new Insets(5, 10, 0, 0);
    Insets compInsets  = new Insets(5, 5, 0, 10);


    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel prLabel = new JLabel("Project Root");
    prLabel.setToolTipText("<html>The root directory for the project source files .<br>"+
    "If not specified, the parent directory of the project file.</html>");
    gridbag.setConstraints(prLabel, c);

    panel.add(prLabel);
    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    JPanel prPanel = _projRootPanel();
    gridbag.setConstraints(prPanel, c);
    panel.add(prPanel);


    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel bdLabel = new JLabel("Build Directory");
    bdLabel.setToolTipText("<html>The directory the class files will be compiled into.<br>"+
        "If not specified, the class files will be compiled into<br>"+
    "the same directory as their corresponding source files</html>");
    gridbag.setConstraints(bdLabel, c);

    panel.add(bdLabel);
    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    JPanel bdPanel = _buildDirectoryPanel();
    gridbag.setConstraints(bdPanel, c);
    panel.add(bdPanel);


    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel wdLabel = new JLabel("Working Directory");
    wdLabel.setToolTipText("<html>The root directory for relative path names.</html>");
    gridbag.setConstraints(wdLabel, c);

    panel.add(wdLabel);
    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    JPanel wdPanel = _workDirectoryPanel();
    gridbag.setConstraints(wdPanel, c);
    panel.add(wdPanel);


    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel classLabel = new JLabel("Main Document");
    classLabel.setToolTipText("<html>The project document containing the<br>" + 
    "<code>main</code> method for the entire project</html>");
    gridbag.setConstraints(classLabel, c);
    panel.add(classLabel);

    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    JPanel mainClassPanel = _mainDocumentSelector();
    gridbag.setConstraints(mainClassPanel, c);
    panel.add(mainClassPanel);

    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel extrasLabel = new JLabel("Extra Classpath");
    extrasLabel.setToolTipText("<html>The list of extra classpaths to load with the project.<br>"+  
        "This may include either JAR files or directories. Any<br>"+
        "classes defined in these classpath locations will be <br>"+
        "visible in the interactions pane and also accessible <br>"+
    "by the compiler when compiling the project.</html>");
    gridbag.setConstraints(extrasLabel, c);
    panel.add(extrasLabel);

    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    Component extrasComponent = _extraClassPathComponent();
    gridbag.setConstraints(extrasComponent, c);
    panel.add(extrasComponent);
    
    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;

    JLabel refreshLabel = new JLabel("Auto Refresh");
    refreshLabel.setToolTipText("<html>Whether the project will automatically open new files found within the source tree</html>");
    gridbag.setConstraints(refreshLabel, c);
    panel.add(refreshLabel);

    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;

    _autoRefreshComponent = new JCheckBox();
    gridbag.setConstraints(_autoRefreshComponent, c);
    panel.add(_autoRefreshComponent);    

    c.weightx = 0.0;
    c.gridwidth = 1;
    c.insets = labelInsets;
    
    JLabel excludedLabel = new JLabel("<html>Files Excluded from<br>Auto-Refresh</html>");
    excludedLabel.setToolTipText("<html>The list of source files excluded from project auto-refresh.<br>"+
                                 "These files will not be added to the project.</html>");
    gridbag.setConstraints(excludedLabel, c);
    panel.add(excludedLabel);
    
    c.weightx = 1.0;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.insets = compInsets;
    
    Component excludedComponent = _excludedFilesComponent();
    gridbag.setConstraints(excludedComponent, c);
    panel.add(excludedComponent);
  }
  
   private DocumentListener _applyListener = new DocumentListener() {
      public void insertUpdate(DocumentEvent e) { setEnabled(); }
      public void removeUpdate(DocumentEvent e) { setEnabled(); }
      public void changedUpdate(DocumentEvent e) { setEnabled(); }
      private void setEnabled() { Utilities.invokeLater(new Runnable() { public void run() { _applyButton.setEnabled(true); } }); }
   };

  public JPanel _projRootPanel() {
    DirectoryChooser dirChooser = new DirectoryChooser(this);
    dirChooser.setSelectedFile(_getProjRoot());
    dirChooser.setDialogTitle("Select Project Root Folder");
    dirChooser.setApproveButtonText("Select");
    _projRootSelector = new DirectorySelectorComponent(this, dirChooser, 20, 12f) {
      protected void _chooseFile() {
        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
        super._chooseFile();
        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
      }
    };
    
    _projRootSelector.getFileField().getDocument().addDocumentListener(_applyListener);

    return _projRootSelector;
  }

  public JPanel _buildDirectoryPanel() {
    DirectoryChooser dirChooser = new DirectoryChooser(this);
    File bd = _getBuildDir();
    if (bd == null || bd == FileOps.NULL_FILE) bd = _getProjRoot();
    dirChooser.setSelectedFile(bd);
    dirChooser.setDialogTitle("Select Build Directory");
    dirChooser.setApproveButtonText("Select");
    _buildDirSelector = new DirectorySelectorComponent(this, dirChooser, 20, 12f, false) {
      protected void _chooseFile() {
        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
        super._chooseFile();
        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
      }
    };

    _buildDirSelector.getFileField().getDocument().addDocumentListener(_applyListener);

    return _buildDirSelector;
  }

  public JPanel _workDirectoryPanel() {
    DirectoryChooser dirChooser = new DirectoryChooser(this);
    dirChooser.setSelectedFile(_getWorkDir());
    dirChooser.setDialogTitle("Select Working Directory");
    dirChooser.setApproveButtonText("Select");
    _workDirSelector = new DirectorySelectorComponent(this, dirChooser, 20, 12f) {
      protected void _chooseFile() {
        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
        super._chooseFile();
        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
      }
    };

    _workDirSelector.getFileField().getDocument().addDocumentListener(_applyListener);
    return _workDirSelector;
  }

  public Component _extraClassPathComponent() {
    _extraClassPathList = new VectorFileOptionComponent(null, "Extra Project Classpaths", this) {
      protected Action _getAddAction() {
        final Action a = super._getAddAction();
        return new AbstractAction("Add") {
          public void actionPerformed(ActionEvent ae) {
            _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
            a.actionPerformed(ae);
            _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
          }
        };
      }
    };
    _extraClassPathList.addChangeListener(new OptionComponent.ChangeListener() {
      public Object value(Object oc) {
        _applyButton.setEnabled(true);
        return null;
      }
    });
    return _extraClassPathList.getComponent();
  }

  public Component _excludedFilesComponent() {
    _excludedFilesList = new VectorFileOptionComponent(null, "Files Excluded from Auto-Refresh", this, false) {
      protected Action _getAddAction() {
        final Action a = super._getAddAction();
        return new AbstractAction("Add") {
          public void actionPerformed(ActionEvent ae) {
            _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
            a.actionPerformed(ae);
            _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
          }
        };
      }
    };
    _excludedFilesList.setFileFilter(new JavaSourceFilter());
    _excludedFilesList.addChangeListener(new OptionComponent.ChangeListener() {
      public Object value(Object oc) {
        _applyButton.setEnabled(true);
        return null;
      }
    });
    if (_model.getProjectRoot()!=null) {
      _excludedFilesList.setBaseDir(_model.getProjectRoot());
    }
    return _excludedFilesList.getComponent();
  }

  public JPanel _mainDocumentSelector() {
    final File projRoot = _getProjRoot();

    FileChooser chooser = new FileChooser(projRoot);
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);

    chooser.setDialogTitle("Select Main Document");
    chooser.setCurrentDirectory(projRoot);
    File mainFile = _getMainFile();
    if (mainFile != FileOps.NULL_FILE) chooser.setSelectedFile(mainFile);

    chooser.setApproveButtonText("Select");

    chooser.addChoosableFileFilter(new JavaSourceFilter());
    _mainDocumentSelector = new FileSelectorComponent(this, chooser, 20, 12f) {
      protected void _chooseFile() {
        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);
        super._chooseFile();
        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);
      }
    };

    _mainDocumentSelector.getFileField().getDocument().addDocumentListener(_applyListener);
    return _mainDocumentSelector;
  }

  public JPanel _manifestFileSelector() {
    JFileChooser fileChooser = new JFileChooser(_getProjRoot().getParentFile());
    fileChooser.setDialogTitle("Select Output jar File");
    fileChooser.setApproveButtonText("Select");
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setMultiSelectionEnabled(false);
    _manifestFileSelector = new FileSelectorComponent(this, fileChooser, 20, 12f);

    _manifestFileSelector.setFileFilter(new FileFilter() {
      public boolean accept(File f) { return f.getName().endsWith(".jar") || f.isDirectory(); }
      public String getDescription() { return "Java Archive Files (*.jar)"; }
    });
    return _manifestFileSelector;
  }

  public JPanel _jarFileSelector() {
    JFileChooser fileChooser = new JFileChooser(_getProjRoot());
    fileChooser.setDialogTitle("Select Manifest File");
    fileChooser.setApproveButtonText("Select");
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setMultiSelectionEnabled(false);
    _jarFileSelector = new FileSelectorComponent(this, fileChooser, 20, 12f);
    _jarFileSelector.setFileFilter(new FileFilter() {
      public boolean accept(File f) { return f.getName().endsWith(".jar") || f.isDirectory(); }
      public String getDescription() { return "Java Archive Files (*.jar)"; }
    });
    return _jarFileSelector;
  }

  /** Runnable that calls _cancel. */
  protected final Runnable1<WindowEvent> CANCEL = new Runnable1<WindowEvent>() {
    public void run(WindowEvent e) { cancel(); }
  };
  
  /** Validates before changing visibility.  Only runs in the event thread.
    * @param vis true if frame should be shown, false if it should be hidden.
    */
  public void setVisible(boolean vis) {
    assert EventQueue.isDispatchThread();
    validate();
    if (vis) {
      _mainFrame.hourglassOn();
      _mainFrame.installModalWindowAdapter(this, LambdaUtil.NO_OP, CANCEL);
      toFront();
    }
    else {
      _mainFrame.removeModalWindowAdapter(this);
      _mainFrame.hourglassOff();
      _mainFrame.toFront();
    }
    super.setVisible(vis);
  }
}
