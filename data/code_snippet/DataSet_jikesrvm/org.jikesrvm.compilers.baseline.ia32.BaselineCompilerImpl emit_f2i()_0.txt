  protected final void emit_f2i() {
    if (SSE2_BASE) {
      asm.emitMOVSS_Reg_Abs(XMM0, Magic.getTocPointer().plus(Entrypoints.maxintFloatField.getOffset()));
      asm.emitMOVSS_Reg_RegInd(XMM1, SP);
      asm.emitUCOMISS_Reg_Reg(XMM0, XMM1);
      ForwardReference fr1 = asm.forwardJcc(Assembler.LLE);
      asm.emitCVTTSS2SI_Reg_Reg(T0, XMM1);
      asm.emitMOV_RegInd_Reg(SP, T0);
      ForwardReference fr2 = asm.forwardJMP();
      fr1.resolve(asm);
      asm.emitMOV_RegInd_Imm(SP, 0x7FFFFFFF);
      ForwardReference fr4 = asm.forwardJMP();
      fr3.resolve(asm);
      asm.emitMOV_RegInd_Imm(SP, 0);
      fr2.resolve(asm);
      fr4.resolve(asm);
    } else {

      int numNonVols = NONVOLATILE_GPRS.length;
      Offset off = Offset.fromIntSignExtend(numNonVols * WORDSIZE);
      for (int i = 0; i < numNonVols; i++) {
        asm.emitPUSH_Reg(NONVOLATILE_GPRS[i]);
      }
      asm.emitPUSH_RegDisp(SP, off);
      asm.emitMOV_Reg_Abs(S0, Magic.getTocPointer().plus(Entrypoints.the_boot_recordField.getOffset()));
      asm.emitCALL_RegDisp(S0, Entrypoints.sysFloatToIntIPField.getOffset());
      asm.emitPOP_Reg(S0);
      for (int i = numNonVols - 1; i >= 0; i--) {
        asm.emitPOP_Reg(NONVOLATILE_GPRS[i]);
      }
      asm.emitMOV_RegInd_Reg(SP, T0);
    }
  }
