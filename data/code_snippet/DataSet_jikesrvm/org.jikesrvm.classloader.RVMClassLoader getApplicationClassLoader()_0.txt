  public static ClassLoader getApplicationClassLoader() {
    if (!VM.runningVM) {
      return null;
    }              /* trick the boot image writer with null,
                                   which it will use when initializing
                                   java.lang.ClassLoader$StaticData */

    /* Lie, until we are really ready for someone to actually try
     * to use this class loader to load classes and resources.
     */
    if (!appCLReady) {
      return BootstrapClassLoader.getBootstrapClassLoader();
    }

    if (appCL != null) {
      return appCL;
    }

    if (gettingAppCL > 0 || DBG_APP_CL) {
      VM.sysWriteln("JikesRVM: RVMClassLoader.getApplicationClassLoader(): ",
                    gettingAppCL > 0 ? "Recursively " : "",
                    "invoked with ",
                    gettingAppCL,
                    " previous instances pending");
    }
    if (gettingAppCL > 0) {
      VM.sysFail(
          "JikesRVM: While we are setting up the application class loader, some class required that selfsame application class loader.  This is a chicken-and-egg problem; see a Jikes RVM Guru.");
    }
    ++gettingAppCL;

    String r = getApplicationRepositories();

    if (Properties.verboseBoot >= 1 || DBG_APP_CL) {
      VM.sysWriteln("RVMClassLoader.getApplicationClassLoader(): " +
                    "Initializing Application ClassLoader, with" +
                    " repositories: `", r, "'...");
    }

    appCL = new ApplicationClassLoader(r);

    if (Properties.verboseBoot >= 1 || DBG_APP_CL) {
      VM.sysWriteln("RVMClassLoader.getApplicationClassLoader(): ...initialized Application classloader, to ",
                    appCL.toString());
    }
    --gettingAppCL;
    return appCL;
  }
