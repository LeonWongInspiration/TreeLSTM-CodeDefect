  public synchronized Object deleteMin() {
    if (isEmpty()) return null;

    Object returnValue = queue[1].data;
    queue[1].priority = queue[numElements].priority;
    queue[1].data = queue[numElements].data;
    numElements--;

    int current = 1;

    int child1 = 2 * current;
    while (child1 <= numElements) {
      int child2 = 2 * current + 1;

      int smaller;
      if (child2 <= numElements && queue[child2].priority > queue[child1].priority) {
        smaller = child2;
      } else {
        smaller = child1;
      }

      if (queue[smaller].priority <= queue[current].priority) {
        break;
      } else {
        PriorityQueueNode tmp = queue[smaller];
        queue[smaller] = queue[current];
        queue[current] = tmp;

        current = smaller;
        child1 = 2 * current;
      }
    }
    return returnValue;
  }
