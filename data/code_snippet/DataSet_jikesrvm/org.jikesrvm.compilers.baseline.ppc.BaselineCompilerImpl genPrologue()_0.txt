  private void genPrologue() {
    if (klass.hasBridgeFromNativeAnnotation()) {
      JNICompiler.generateGlueCodeForJNIMethod(asm, method);
    }

    if (isInterruptible) {
    }

    asm.emitSTAddrU(FP,
                    -frameSize,

    if (klass.hasDynamicBridgeAnnotation()) {
      int offset = frameSize;
      for (int i = LAST_NONVOLATILE_FPR; i >= FIRST_VOLATILE_FPR; --i) {
        asm.emitSTFD(i, offset -= BYTES_IN_DOUBLE, FP);
      }
      for (int i = LAST_NONVOLATILE_GPR; i >= FIRST_VOLATILE_GPR; --i) {
        asm.emitSTAddr(i, offset -= BYTES_IN_ADDRESS, FP);
      }

      offset = Memory.alignDown(offset - STACKFRAME_ALIGNMENT + 1, STACKFRAME_ALIGNMENT);

      for (int i = LAST_SCRATCH_FPR; i >= FIRST_SCRATCH_FPR; --i) {
        asm.emitSTFD(i, offset -= BYTES_IN_DOUBLE, FP);
      }
      for (int i = LAST_SCRATCH_GPR; i >= FIRST_SCRATCH_GPR; --i) {
        asm.emitSTAddr(i, offset -= BYTES_IN_ADDRESS, FP);
      }
    } else {
      int offset = frameSize;
      for (int i = lastFloatStackRegister; i >= FIRST_FLOAT_LOCAL_REGISTER; --i) {
        asm.emitSTFD(i, offset -= BYTES_IN_DOUBLE, FP);
      }
      for (int i = lastFixedStackRegister; i >= FIRST_FIXED_LOCAL_REGISTER; --i) {
        asm.emitSTAddr(i, offset -= BYTES_IN_ADDRESS, FP);
      }
    }

    asm.emitLVAL(S0, compiledMethod.getId());
    asm.emitMFLR(0);
    asm.emitSTAddr(0,
                   frameSize + STACKFRAME_NEXT_INSTRUCTION_OFFSET,


    /* defer generating prologues which may trigger GC, see emit_deferred_prologue*/
    if (method.isForOsrSpecialization()) {
      return;
    }


    if (method.isSynchronized()) {
      genSynchronizedMethodPrologue();
    }
  }
