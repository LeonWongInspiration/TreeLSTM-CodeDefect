  private static void compileMethodsInVector() {
    int size = baselineMethodVector.size();
    VM.sysWrite("Compiling " + size + " methods baseline\n");
    for (int i = 0; i < size; i++) {
      NormalMethod method = (NormalMethod) baselineMethodVector.elementAt(i);
      CompiledMethod cm = null;
      cm = BaselineCompiler.compile(method);
      method.replaceCompiledMethod(cm);
      if (PRINT_CODE_ADDRESS)
        VM.sysWriteln("Method: " + method + " compiled code: ", Magic.objectAsAddress(cm.getEntryCodeArray()));
    }

    size = optMethodVector.size();
    VM.sysWrite("Compiling " + size + " methods opt\n");
    for (int i = 0; i < size; i++) {
      NormalMethod method = (NormalMethod) optMethodVector.elementAt(i);
      OptOptions opts = optOptionsVector.elementAt(i);
      try {
        CompiledMethod cm = null;
        CompilationPlan cp =
            new CompilationPlan(method, OptimizationPlanner.createOptimizationPlan(opts), null, opts);
        cm = OptimizingCompiler.compile(cp);
        method.replaceCompiledMethod(cm);
        if (PRINT_CODE_ADDRESS)
          VM.sysWriteln("Method: " + method + " compiled code: ", Magic.objectAsAddress(cm.getEntryCodeArray()));
      } catch (OptimizingCompilerException e) {
        if (e.isFatal && VM.ErrorsFatal) {
          e.printStackTrace();
          VM.sysFail("Internal vm error: " + e.toString());
        } else {
          System.err.println("SKIPPING opt-compilation of " + method + ":\n  " + e.getMessage());
          if (opts.PRINT_METHOD) {
            e.printStackTrace();
          }
        }
      }
    }
  }
