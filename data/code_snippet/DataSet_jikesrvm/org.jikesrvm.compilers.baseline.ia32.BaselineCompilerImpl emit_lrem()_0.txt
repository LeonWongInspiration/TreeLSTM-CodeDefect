  protected final void emit_lrem() {
    if (VM.BuildFor64Addr) {
      asm.emitIDIV_Reg_Reg_Quad(EAX, ECX);
    } else {
      asm.emitMOV_Reg_RegInd(T0, SP);
      asm.emitOR_Reg_RegDisp(T0, SP, ONE_SLOT);
      asm.emitBranchLikelyNextInstruction();
      ForwardReference fr1 = asm.forwardJcc(Assembler.NE);
      fr1.resolve(asm);
      int numNonVols = NONVOLATILE_GPRS.length;
      Offset off = Offset.fromIntSignExtend(numNonVols * WORDSIZE);
      for (int i = 0; i < numNonVols; i++) {
        asm.emitPUSH_Reg(NONVOLATILE_GPRS[i]);
      }
      asm.emitPUSH_RegDisp(SP, off.plus(4));
      asm.emitPUSH_RegDisp(SP, off.plus(4));
      asm.emitPUSH_RegDisp(SP, off.plus(20));
      asm.emitPUSH_RegDisp(SP, off.plus(20));
      asm.emitMOV_Reg_Abs(S0, Magic.getTocPointer().plus(Entrypoints.the_boot_recordField.getOffset()));
      asm.emitCALL_RegDisp(S0, Entrypoints.sysLongRemainderIPField.getOffset());
      adjustStack(4 * WORDSIZE, true);
      for (int i = numNonVols - 1; i >= 0; i--) {
        asm.emitPOP_Reg(NONVOLATILE_GPRS[i]);
      }
      adjustStack(WORDSIZE*4, true);
      asm.emitPUSH_Reg(T1);
      asm.emitPUSH_Reg(T0);
    }
  }
