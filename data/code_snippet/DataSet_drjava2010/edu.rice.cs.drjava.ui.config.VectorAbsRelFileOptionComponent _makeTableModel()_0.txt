  protected AbstractTableModel _makeTableModel() {
    return new AbstractTableModel() {
      public String getColumnName(int col) { return (_columnNames.length == 0)?super.getColumnName(col):_columnNames[col]; }
      public int getRowCount() { return _data.size(); }
      public int getColumnCount() { return 2; }
      public Object getValueAt(int row, int col) {
        switch(col) {
          case 0: return _data.get(row);
          case 1: return _data.get(row).keepAbsolute();
        }
        throw new IllegalArgumentException("Illegal column");
      }
      public Class<?> getColumnClass(int col) {
        switch(col) {
          case 0: return String.class;
          case 1: return Boolean.class;
        }
        throw new IllegalArgumentException("Illegal column");
      }
      public boolean isCellEditable(int row, int col) {
        if (col<1) {
          return false;
        } else {
          return true;
        }
      }
      public void setValueAt(Object value, int row, int col) {
        AbsRelFile f = _data.get(row);
        switch(col) {
          case 1:
            f.keepAbsolute((Boolean)value);
            break;
          default:
            throw new IllegalArgumentException("Illegal column");
        }
        fireTableCellUpdated(row, col);
      }
    };
  }
