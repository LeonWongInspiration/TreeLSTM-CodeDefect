  public void testArithmetic() throws CloneNotSupportedException {
    PropertyMaps pm = PropertyMaps.TEMPLATE.clone();
    DrJavaProperty p;
    
    p = pm.getProperty("Misc","add");
    assertTrue(p.getCurrent(pm).startsWith("(add Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(add Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(add Error"));
    p.setAttribute("op1","1");
    p.setAttribute("op2","2");
    assertEquals("3",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","2");
    assertEquals("32",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","1.23");
    assertEquals("31.23",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(add Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(add Error"));
    
    p = pm.getProperty("Misc","sub");
    assertTrue(p.getCurrent(pm).startsWith("(sub Error"));
    p.setAttribute("op1","1"); 
    assertTrue(p.getCurrent(pm).startsWith("(sub Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(sub Error"));
    p.setAttribute("op1","1");
    p.setAttribute("op2","2");
    assertEquals("-1",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","2");
    assertEquals("28",p.getCurrent(pm));
    p.setAttribute("op1","30.123");
    p.setAttribute("op2","2.1");
    assertEquals("28.023",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(sub Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(sub Error"));
    
    p = pm.getProperty("Misc","mul");
    assertTrue(p.getCurrent(pm).startsWith("(mul Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(mul Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(mul Error"));
    p.setAttribute("op1","3");
    p.setAttribute("op2","4");
    assertEquals("12",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","-2");
    assertEquals("-60",p.getCurrent(pm));
    p.setAttribute("op1","30.2");
    p.setAttribute("op2","3");
    assertEquals("90.6",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(mul Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(mul Error"));
    
    p = pm.getProperty("Misc","div");
    assertTrue(p.getCurrent(pm).startsWith("(div Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(div Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(div Error"));
    p.setAttribute("op1","12");
    p.setAttribute("op2","6");
    assertEquals("2",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","-2");
    assertEquals("-15",p.getCurrent(pm));
    p.setAttribute("op1","-90.6");
    p.setAttribute("op2","-3");
    assertEquals("30.2",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(div Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(div Error"));
    
    p = pm.getProperty("Misc","not");
    assertTrue(p.getCurrent(pm).startsWith("(not Error"));
    p.setAttribute("op","true");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op","false");
    assertEquals("true",p.getCurrent(pm));
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op","2");
    assertEquals("true",p.getCurrent(pm));

    p = pm.getProperty("Misc","gt");
    assertTrue(p.getCurrent(pm).startsWith("(gt Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(gt Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(gt Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","-1.123");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","30");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(gt Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(gt Error"));

    p = pm.getProperty("Misc","gte");
    assertTrue(p.getCurrent(pm).startsWith("(gte Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(gte Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(gte Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","-1.123");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","30");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(gte Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(gte Error"));

    p = pm.getProperty("Misc","lt");
    assertTrue(p.getCurrent(pm).startsWith("(lt Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(lt Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(lt Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","-1.123");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","30");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(lt Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(lt Error"));

    p = pm.getProperty("Misc","lte");
    assertTrue(p.getCurrent(pm).startsWith("(lte Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(lte Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(lte Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","-1.123");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","30");
    p.setAttribute("op2","30");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(lte Error"));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertTrue(p.getCurrent(pm).startsWith("(lte Error"));

    p = pm.getProperty("Misc","eq");
    assertTrue(p.getCurrent(pm).startsWith("(eq Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(eq Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(eq Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","2");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","xyz");
    p.setAttribute("op2","xyz");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertEquals("false",p.getCurrent(pm));

    p = pm.getProperty("Misc","neq");
    assertTrue(p.getCurrent(pm).startsWith("(neq Error"));
    p.setAttribute("op1","1");
    assertTrue(p.getCurrent(pm).startsWith("(neq Error"));
    p.resetAttributes();
    p.setAttribute("op2","2");
    assertTrue(p.getCurrent(pm).startsWith("(neq Error"));
    p.setAttribute("op1","-1.123");
    p.setAttribute("op2","2");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","xyz");
    p.setAttribute("op2","xyz");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","x");
    p.setAttribute("op2","2");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertEquals("true",p.getCurrent(pm));

    p = pm.getProperty("Misc","and");
    assertTrue(p.getCurrent(pm).startsWith("(and Error"));
    p.setAttribute("op1","true");
    assertTrue(p.getCurrent(pm).startsWith("(and Error"));
    p.resetAttributes();
    p.setAttribute("op2","true");
    assertTrue(p.getCurrent(pm).startsWith("(and Error"));
    p.setAttribute("op1","true");
    p.setAttribute("op2","true");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","true");
    p.setAttribute("op2","false");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","false");
    p.setAttribute("op2","true");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","false");
    p.setAttribute("op2","false");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","true");
    p.setAttribute("op2","x");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","true");
    assertEquals("false",p.getCurrent(pm));

    p = pm.getProperty("Misc","or");
    assertTrue(p.getCurrent(pm).startsWith("(or Error"));
    p.setAttribute("op1","true");
    assertTrue(p.getCurrent(pm).startsWith("(or Error"));
    p.resetAttributes();
    p.setAttribute("op2","true");
    assertTrue(p.getCurrent(pm).startsWith("(or Error"));
    p.setAttribute("op1","true");
    p.setAttribute("op2","true");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","true");
    p.setAttribute("op2","false");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","false");
    p.setAttribute("op2","true");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","false");
    p.setAttribute("op2","false");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op2","2");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","x");
    assertEquals("false",p.getCurrent(pm));
    p.setAttribute("op1","true");
    p.setAttribute("op2","x");
    assertEquals("true",p.getCurrent(pm));
    p.setAttribute("op1","2");
    p.setAttribute("op2","true");
    assertEquals("true",p.getCurrent(pm));
  }
