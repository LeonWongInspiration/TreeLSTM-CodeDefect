  private void _copyVariablesFromInterpreter() throws DebugException {
    List<ObjectReference> toRelease = new LinkedList<ObjectReference>();
    try {
      for (LocalVariable var : _runningThread.frame(0).visibleVariables()) {
        Value oldVal = _runningThread.frame(0).getValue(var);
        StringReference name = _mirrorString(var.name(), toRelease);
        ArrayReference wrappedVal =
          (ArrayReference) _invokeMethod(_runningThread, _interpreterJVM, "getVariable",
                                         GET_VARIABLE_SIG, name);
          try {
            Value val = wrappedVal.getValue(0);
            if (var.type() instanceof PrimitiveType) {
              try { val = _unbox((ObjectReference) val, _runningThread); }
              catch (DebugException e) { error.log("Can't unbox variable", e); }
            }
            if ((oldVal == null) || (!oldVal.equals(val))) {
              try { _runningThread.frame(0).setValue(var, val); }
              catch (InvalidTypeException e) { error.log("Can't set variable", e); }
              catch (ClassNotLoadedException e) { error.log("Can't set variable", e); }
            }
          }
          catch (ClassNotLoadedException e) { /* just ignore -- val must be null anyway */ }
        }
      }
    }
