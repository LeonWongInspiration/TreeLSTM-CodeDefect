//  public OutputStream getOutputStream() {
  
  /**
   * Gets the output stream of the process sequence, i.e. the combined
   * output stream of all the processes in the sequence.
   *
   * @return  the output stream of the process sequence.
   */
  public OutputStream getOutputStream() {
    if (_aborted) {
      return new OutputStream() {
        public void write(int b) throws IOException { }
      };
    }
    else {
      return new BufferedOutputStream(_processes[0].getOutputStream());
    }
  }
  
  /**
   * Gets the error stream of the process sequence, i.e. the combined
   * error stream of all the processes in the sequence.
   *
   * @return  the error stream of the process sequence.
   */
  public InputStream getErrorStream() {
    return _combinedErrorStream;
  }
  
  /**
   * Gets the input stream of the process sequence,  i.e. the combined
   * input stream of all the processes in the sequence.
   *
   * @return  the input stream of the process chain
   */
  public InputStream getInputStream() {
    return _combinedInputJoinedWithDebugStream;
  }
  
  /**
   * Causes the current thread to wait, if necessary, until the 
   * process chain has terminated, i.e. until all processes in the
   * chain have terminated. This method returns immediately if
   * all subprocesses have already terminated. If any of the
   * subprocess has not yet terminated, the calling thread will be
   * blocked until all subprocesses exit.
   *
   * @return     the exit value of the process chain, i.e. the
   *             exit code of the last process in the chain.
   * @exception  InterruptedException  if the current thread is 
   *             {@link Thread#interrupt() interrupted} by another thread 
   *             while it is waiting, then the wait is ended and an 
   *             {@link InterruptedException} is thrown.
   */
  public int waitFor() throws InterruptedException {
    if (_aborted) { return -1; }
    int exitCode = 0;
    for(int i = 0; i < _processes.length; ++i) {
      exitCode = _processes[i].waitFor();
    }
    return exitCode;
  }
  
  /**
   * Returns the exit value for the subprocess.
   *
   * @return  the exit value of the subprocess represented by this 
   *          <code>Process</code> object. by convention, the value 
   *          <code > 0</code> indicates normal termination.
   * @exception  IllegalThreadStateException  if the subprocess represented 
   *             by this <code>Process</code> object has not yet terminated.
   */
  public int exitValue() {
    if (_aborted) { return -1; }
    int exitCode = 0;
    for(int i = 0; i < _processes.length; ++i) {
      exitCode = _processes[i].exitValue();
    }
    return exitCode;
  }
  
  /**
   * Kills all subprocesses. The subprocesses represented by this 
   * <code>ProcessChain</code> object is forcibly terminated.
   */
  public void destroy() {
    _aborted = true;
    for(int i = 0; i < _processes.length; ++i) {
      _processes[i].destroy();
    }
    stopAllRedirectors();
  }
  
  /** Set the stop flags for all redirector threads. */
  protected void stopAllRedirectors() {
    for(StreamRedirectThread r: _redirectors) { r.setStopFlag(); }
    _redirectors.clear();
  }
  
  /** Thread group for all threads that deal with this process sequence. */
  protected static class ProcessChainThreadGroup extends ThreadGroup {
    private ProcessChain _chain;
    private PrintWriter _debugOut;
    public ProcessChainThreadGroup(ProcessChain chain) {
      super("Process Chain Thread Group");
      _chain = chain;
      _debugOut = _chain._debugOutput;
    }
    public void uncaughtException(Thread t, Throwable e) {
      destroy();
      if ((e instanceof StreamRedirectException) &&
          (e.getCause() instanceof java.io.IOException)) {
        _debugOut.println("\n\n\nAn exception occurred during the execution of the command line:\n"+
                          e.toString()+"\n\n");
      }
      else {
        DrJavaErrorHandler.record(e);
      }
    }
  }
}
