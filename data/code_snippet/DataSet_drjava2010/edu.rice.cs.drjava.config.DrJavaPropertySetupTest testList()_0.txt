  public void testList() throws CloneNotSupportedException {
    PropertyMaps pm = PropertyMaps.TEMPLATE.clone();
    DrJavaProperty p;
    
    p = pm.getProperty("Misc","count");
    assertTrue(p.getCurrent(pm).startsWith("(count Error"));
    p.setAttribute("list","abc");
    assertEquals("1",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("0",p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("2",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def");
    assertEquals("3",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def"+PS);
    assertEquals("4",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def"+PS+PS);
    assertEquals("5",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc"+PS+"def"+PS+PS);
    assertEquals("6",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc"+PS+PS+"def"+PS+PS);
    assertEquals("7",p.getCurrent(pm));
    
    p.setAttribute("list","abc 123");
    assertEquals("1",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("0",p.getCurrent(pm));
    p.setAttribute("list","abc 123"+PS+"def 456");
    assertEquals("2",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456");
    assertEquals("3",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456"+PS);
    assertEquals("4",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456"+PS+PS);
    assertEquals("5",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc 123"+PS+"def 456"+PS+PS);
    assertEquals("6",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc 123"+PS+PS+"def 456"+PS+PS);
    assertEquals("7",p.getCurrent(pm));
    
    p.setAttribute("sep"," ");
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("1",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("0",p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("2",p.getCurrent(pm));
    p.setAttribute("list"," abc def");
    assertEquals("3",p.getCurrent(pm));
    p.setAttribute("list"," abc def ");
    assertEquals("4",p.getCurrent(pm));
    p.setAttribute("list"," abc def  ");
    assertEquals("5",p.getCurrent(pm));
    p.setAttribute("list","  abc def  ");
    assertEquals("6",p.getCurrent(pm));
    p.setAttribute("list","  abc  def  ");
    assertEquals("7",p.getCurrent(pm));
    
    p = pm.getProperty("Misc","sublist");
    assertTrue(p.getCurrent(pm).startsWith("(sublist Error"));
    p.resetAttributes();
    p.setAttribute("list","");
    assertTrue(p.getCurrent(pm).startsWith("(sublist Error"));
    p.resetAttributes();
    p.setAttribute("index","0");
    assertTrue(p.getCurrent(pm).startsWith("(sublist Error"));
    p.resetAttributes();
    p.setAttribute("list","");
    p.setAttribute("index","0");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS);
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list",PS+"def");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def"+PS+"ghi");
    assertEquals("abc", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","1");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS);
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list",PS+"def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def"+PS+"ghi");
    assertEquals("def", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","0");
    p.setAttribute("count","2");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS);
    assertEquals("abc"+PS, p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("abc"+PS+"def", p.getCurrent(pm));
    p.setAttribute("list",PS+"def");
    assertEquals(PS+"def", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def"+PS+"ghi");
    assertEquals("abc"+PS+"def", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","1");
    p.setAttribute("count","2");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS);
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list",PS+"def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def"+PS+"ghi");
    assertEquals("def"+PS+"ghi", p.getCurrent(pm));
    
    p.resetAttributes();
    p.setAttribute("sep"," ");
    p.setAttribute("list","");
    p.setAttribute("index","0");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc ");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list"," def");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc def ghi");
    assertEquals("abc", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","1");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc ");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list"," def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list","abc def ghi");
    assertEquals("def", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","0");
    p.setAttribute("count","2");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("abc", p.getCurrent(pm));
    p.setAttribute("list","abc ");
    assertEquals("abc ", p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("abc def", p.getCurrent(pm));
    p.setAttribute("list"," def");
    assertEquals(" def", p.getCurrent(pm));
    p.setAttribute("list","abc def ghi");
    assertEquals("abc def", p.getCurrent(pm));
    
    p.setAttribute("list","");
    p.setAttribute("index","1");
    p.setAttribute("count","2");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc ");
    assertEquals("", p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list"," def");
    assertEquals("def", p.getCurrent(pm));
    p.setAttribute("list","abc def ghi");
    assertEquals("def ghi", p.getCurrent(pm));

    p = pm.getProperty("Misc","change.sep");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.setAttribute("list","");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.resetAttributes();
    p.setAttribute("old","abc");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.resetAttributes();
    p.setAttribute("new","123");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.resetAttributes();
    p.setAttribute("list","");
    p.setAttribute("old","abc");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.resetAttributes();
    p.setAttribute("list","");
    p.setAttribute("new","123");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.resetAttributes();
    p.setAttribute("old",PS);
    p.setAttribute("new"," ");
    assertTrue(p.getCurrent(pm).startsWith("(change.sep Error"));
    p.setAttribute("list","abc");
    assertEquals("abc",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("",p.getCurrent(pm));
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("abc def",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def");
    assertEquals(" abc def",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def"+PS);
    assertEquals(" abc def ",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc"+PS+"def"+PS+PS);
    assertEquals(" abc def  ",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc"+PS+"def"+PS+PS);
    assertEquals("  abc def  ",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc"+PS+PS+"def"+PS+PS);
    assertEquals("  abc  def  ",p.getCurrent(pm));
    
    p.setAttribute("list","abc 123");
    assertEquals("abc 123",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("",p.getCurrent(pm));
    p.setAttribute("list","abc 123"+PS+"def 456");
    assertEquals("abc 123 def 456",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456");
    assertEquals(" abc 123 def 456",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456"+PS);
    assertEquals(" abc 123 def 456 ",p.getCurrent(pm));
    p.setAttribute("list",PS+"abc 123"+PS+"def 456"+PS+PS);
    assertEquals(" abc 123 def 456  ",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc 123"+PS+"def 456"+PS+PS);
    assertEquals("  abc 123 def 456  ",p.getCurrent(pm));
    p.setAttribute("list",PS+PS+"abc 123"+PS+PS+"def 456"+PS+PS);
    assertEquals("  abc 123  def 456  ",p.getCurrent(pm));
    
    p.setAttribute("old"," ");
    p.setAttribute("new",PS);
    p.setAttribute("list","abc"+PS+"def");
    assertEquals("abc"+PS+"def",p.getCurrent(pm));
    p.setAttribute("list","");
    assertEquals("",p.getCurrent(pm));
    p.setAttribute("list","abc def");
    assertEquals("abc"+PS+"def",p.getCurrent(pm));
    p.setAttribute("list"," abc def");
    assertEquals(PS+"abc"+PS+"def",p.getCurrent(pm));
    p.setAttribute("list"," abc def ");
    assertEquals(PS+"abc"+PS+"def"+PS,p.getCurrent(pm));
    p.setAttribute("list"," abc def  ");
    assertEquals(PS+"abc"+PS+"def"+PS+PS,p.getCurrent(pm));
    p.setAttribute("list","  abc def  ");
    assertEquals(PS+PS+"abc"+PS+"def"+PS+PS,p.getCurrent(pm));
    p.setAttribute("list","  abc  def  ");
    assertEquals(PS+PS+"abc"+PS+PS+"def"+PS+PS,p.getCurrent(pm));
  }
