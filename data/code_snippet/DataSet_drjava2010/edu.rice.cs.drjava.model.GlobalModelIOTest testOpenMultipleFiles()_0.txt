  public void testOpenMultipleFiles() throws BadLocationException, IOException {
    final File tempFile1 = writeToNewTempFile(FOO_TEXT);
    final File tempFile2 = writeToNewTempFile(BAR_TEXT);
    
    TestListener listener = new TestIOListener() {
      public void fileOpened(OpenDefinitionsDocument doc) {
        super.fileOpened(doc);
        File file = FileOps.NULL_FILE;
        try { file = doc.getFile(); }
        if (tempFile1.equals(file))
          assertEquals("file to open", IOUtil.attemptCanonicalFile(tempFile1), IOUtil.attemptCanonicalFile(file));
        else assertEquals("file to open", IOUtil.attemptCanonicalFile(tempFile2), IOUtil.attemptCanonicalFile(file));
      }
    };
    
    _model.addListener(listener);
    try {
      OpenDefinitionsDocument[] docs = _model.openFiles(new FileSelector(tempFile1, tempFile2));
      listener.assertOpenCount(2);
      assertEquals("Number of docs returned", docs.length, 2);
      assertModified(false, docs[0]);
      assertContents(FOO_TEXT, docs[0]);
      assertModified(false, docs[1]);
      assertContents(BAR_TEXT, docs[1]);
    }
    catch (AlreadyOpenException aoe) {
      fail("File was already open!");
    }
    catch (OperationCanceledException oce) {
      fail("Open was unexpectedly canceled!");
    }
    listener.assertOpenCount(2);
    List<OpenDefinitionsDocument> docs = _model.getSortedOpenDefinitionsDocuments();
    assertEquals("size of document array", 2, docs.size());
    assertContents(FOO_TEXT, docs.get(0));
    assertContents(BAR_TEXT, docs.get(1));
    
    _log.log("testOpenMultipleFiles completed");
  }
