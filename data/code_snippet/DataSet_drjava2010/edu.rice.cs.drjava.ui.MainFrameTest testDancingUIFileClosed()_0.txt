  public void testDancingUIFileClosed() throws IOException {
    /** Maybe this sequence of calls should be incorporated into one function createTestDir(), which would get the 
      * username and create the temporary directory. Only sticky part is deciding where to put it, in FileOps maybe?
      */
    String user = System.getProperty("user.name");
    _tempDir = IOUtil.createAndMarkTempDirectory("DrJava-test-" + user, "");
    File forceOpenClass1_file = new File(_tempDir, "ForceOpenClass1.java");
    String forceOpenClass1_string =
      "public class ForceOpenClass1 {\n" +
      "  ForceOpenClass2 class2;\n" +
      "  ForceOpenClass3 class3;\n\n" +
      "  public ForceOpenClass1() {\n" +
      "    class2 = new ForceOpenClass2();\n" +
      "    class3 = new ForceOpenClass3();\n" +
      "  }\n" +
      "}";
    
    IOUtil.writeStringToFile(forceOpenClass1_file, forceOpenClass1_string);
    forceOpenClass1_file.deleteOnExit();
    
    final ComponentAdapter listener = new ComponentAdapter() {
      public void componentResized(ComponentEvent event) {
        _testFailed = true;
        fail("testDancingUI: Open Documents List danced!");
      }
    };
    final SingleDisplayModelFileClosedListener closeListener = new SingleDisplayModelFileClosedListener();
    
    _closeDone = false;
    Utilities.invokeAndWait(new Runnable() { 
      public void run() {
        _frame.pack();
        _frame.addComponentListenerToOpenDocumentsList(listener);
        _frame.open(new FileOpenSelector() {
          public File[] getFiles() {
            File[] return_me = new File[1];
            return_me[0] = new File(_tempDir, "ForceOpenClass1.java");
            return return_me;
          }
        });
        _frame.getModel().addListener(closeListener);
      }
    });
    Utilities.clearEventQueue();
    
    /* Asynchronously close the file */
    Utilities.invokeLater(new Runnable() { 
      public void run() { _frame.getCloseButton().doClick(); }
    });
    
    _log.log("Waiting for file closing");
    
    synchronized(_closeLock) {
      try { while (! _closeDone) _closeLock.wait(); }
      catch(InterruptedException e) { fail(e.toString()); }
    }
    
    if (! IOUtil.deleteRecursively(_tempDir)) {
      System.out.println("Couldn't fully delete directory " + _tempDir.getAbsolutePath() + "\nDo it by hand.\n");
    }
    _log.log("testDancingUIFileClosed completed");
  }
