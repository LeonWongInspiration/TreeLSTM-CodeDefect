//    public UndoableEdit getNextRedo() {
  
  /** Formerly used to help track down memory leaks */
  
  /** This list of listeners to notify when we are finalized. */
  private List<FinalizationListener<DefinitionsDocument>> _finalizationListeners = 
    new LinkedList<FinalizationListener<DefinitionsDocument>>();
  
  /** Registers a finalization listener with the specific instance of the ddoc
    * <p><b>NOTE:</b><i>This should only be used by test cases.  This is to ensure that
    * we don't spring memory leaks by allowing our unit tests to keep track of 
    * whether objects are being finalized (garbage collected)</i></p>
    * @param fl the listener to register
    */
  public void addFinalizationListener(FinalizationListener<DefinitionsDocument> fl) {
    synchronized(_finalizationListeners) { _finalizationListeners.add(fl); }
  }
  
  public List<FinalizationListener<DefinitionsDocument>> getFinalizationListeners() {
    return _finalizationListeners;
  }
  
  /** This is called when this method is GC'd.  Since this class implements edu.rice.cs.drjava.model.Finalizable, it
    * must notify its listeners
    */
  protected void finalize() {
    FinalizationEvent<DefinitionsDocument> fe = new FinalizationEvent<DefinitionsDocument>(this);
    synchronized(_finalizationListeners) {
      for (FinalizationListener<DefinitionsDocument> fl: _finalizationListeners) {
        fl.finalized(fe);
      }
    }
  }
  
  public String toString() { return "ddoc for " + _odd; }
  
  /** Returns true if one of the words 'class', 'interface' or 'enum' is found
    * in non-comment text. */
  public boolean containsClassOrInterfaceOrEnum() throws BadLocationException {
    
/* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();
    int i, j;
    int reducedPos = 0;
    
    final String text = getText();
    final int origLocation = _currentLocation;
    try {
      _reduced.move(-origLocation);
      
      i = text.indexOf("class", reducedPos);
      j = text.indexOf("interface", reducedPos);
      if (i==-1) i = j; else if (j>=0) i = Math.min(i,j);
      j = text.indexOf("enum", reducedPos);
      if (i==-1) i = j; else if (j>=0) i = Math.min(i,j);
      while (i > - 1) {
        
        ReducedModelState state = _reduced.getStateAtCurrent();
        if (!state.equals(FREE) || _isStartOfComment(text, i) || ((i > 0) && _isStartOfComment(text, i - 1))) {
          i = text.indexOf("class", reducedPos+1);
          j = text.indexOf("interface", reducedPos+1);
          if (i==-1) i = j; else if (j>=0) i = Math.min(i,j);
          j = text.indexOf("enum", reducedPos+1);
          if (i==-1) i = j; else if (j>=0) i = Math.min(i,j);
        }
        else {
        }        
      }  
      
      return false;
    }
    finally {
    }
  }
}
