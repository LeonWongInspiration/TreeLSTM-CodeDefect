  void askToIncreaseSlaveMaxHeap() {
    String value = "set to "+DrJava.getConfig().getSetting(SLAVE_JVM_XMX)+" MB";
    if ((!("".equals(DrJava.getConfig().getSetting(SLAVE_JVM_XMX)))) &&
        ((OptionConstants.heapSizeChoices.get(0).equals(DrJava.getConfig().getSetting(SLAVE_JVM_XMX))))) { 
      value = "not set, implying the system's default";
    }
    
    String res = (String)JOptionPane.
      showInputDialog(MainFrame.this,
                      "Your program ran out of memory. You may try to enter a larger\n" +
                      "maximum heap size for the Interactions JVM. The maximum heap size is\n" +
                      "currently "+value+".\n"+
                      "A restart is required after changing this setting.",
                      "Increase Maximum Heap Size?",
                      JOptionPane.QUESTION_MESSAGE,
                      null,
                      OptionConstants.heapSizeChoices.toArray(),
                      DrJava.getConfig().getSetting(SLAVE_JVM_XMX));
    
    if (res != null) {
      DrJava.getConfig().removeOptionListener(SLAVE_JVM_XMX, _slaveJvmXmxListener);
      final ConfigOptionListeners.SlaveJVMXMXListener l = new ConfigOptionListeners.SlaveJVMXMXListener(MainFrame.this);
      DrJava.getConfig().addOptionListener(SLAVE_JVM_XMX, l);
      DrJava.getConfig().setSetting(SLAVE_JVM_XMX,res.trim());
      EventQueue.invokeLater(new Runnable() {
        public void run() {
          DrJava.getConfig().removeOptionListener(SLAVE_JVM_XMX, l);
          DrJava.getConfig().addOptionListener(SLAVE_JVM_XMX, _slaveJvmXmxListener);
        }
      });
    }
    _model.getInteractionsModel().resetLastErrors();
  }
