  public void testModifiedByOtherFalse() throws BadLocationException, IOException, OperationCanceledException,
    AlreadyOpenException, InterruptedException {
    final File tempFile1 = writeToNewTempFile(FOO_TEXT);
    
    final TestListener listener = new TestIOListener() {
      public synchronized void fileReverted(OpenDefinitionsDocument doc) { fileRevertedCount++; }
      public synchronized boolean shouldRevertFile(OpenDefinitionsDocument doc) {
        shouldRevertFileCount++;
        return false;
      }
    };
    
    _model.addListener(listener);
    OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile1));
    listener.assertShouldRevertFileCount(0);
    listener.assertFileRevertedCount(0);
    assertModified(false, doc);
    
    doc.revertIfModifiedOnDisk();
    listener.assertShouldRevertFileCount(0);
    listener.assertFileRevertedCount(0);
    
    synchronized(tempFile1) { tempFile1.wait(2000); }
    
    String s = "THIS IS ONLY A TEST";
    IOUtil.writeStringToFile(tempFile1, s);
    assertEquals("contents of saved file", s, IOUtil.toString(tempFile1));
    
    assertTrue("modified on disk1", doc.modifiedOnDisk());
    boolean reverted = doc.revertIfModifiedOnDisk();
    assertTrue("modified on disk", reverted == false);
    listener.assertShouldRevertFileCount(1);
    listener.assertFileRevertedCount(0);
    assertContents(FOO_TEXT, doc);
    
    
    _log.log("testModifiedByOtherFalse completed");
  }
