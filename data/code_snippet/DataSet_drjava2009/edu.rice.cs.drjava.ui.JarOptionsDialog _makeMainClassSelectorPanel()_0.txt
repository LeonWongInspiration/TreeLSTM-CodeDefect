  private JPanel _makeMainClassSelectorPanel() {
    LOG.log("_makeMainClassSelectorPanel, _rootFile="+_rootFile);
    FileChooser chooser = new FileChooser(_rootFile);
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setMultiSelectionEnabled(false);
    chooser.setDialogTitle("Select Main Class");
    chooser.setApproveButtonText("Select");
    FileFilter filter = new FileFilter() {
      public boolean accept(File f) {
        String name = f.getName();
        return  f.isDirectory() || name.endsWith(".class");
      }
      public String getDescription() { return "Class Files (*.class)"; }
    };
    chooser.addChoosableFileFilter(filter);
    
    _mainClassField = new FileSelectorStringComponent(this, chooser, 20, 12f) {
      protected void _chooseFile() {
        _mainFrame.removeModalWindowAdapter(JarOptionsDialog.this);
        if (getText().length() == 0) {
          LOG.log("getFileChooser().setCurrentDirectory(_rootFile);");
          getFileChooser().setRoot(_rootFile);
          getFileChooser().setCurrentDirectory(_rootFile);
        }
        super._chooseFile();
        if(!getFileChooser().getSelectedFile().getAbsolutePath().startsWith(_rootFile.getAbsolutePath())){
          JOptionPane.showMessageDialog(JarOptionsDialog.this,
                                        "Main Class must be in Build Directory or one of its sub-directories.", 
                                        "Unable to set Main Class", JOptionPane.ERROR_MESSAGE);
          setText("");
        }
        _mainFrame.installModalWindowAdapter(JarOptionsDialog.this, LambdaUtil.NO_OP, CANCEL);
      }
      public File convertStringToFile(String s) { 
        s = s.trim().replace('.', java.io.File.separatorChar) + ".class";
        if (s.equals("")) return null;
        else return new File(_rootFile, s);
      }
      
      public String convertFileToString(File f) {
        if (f == null)  return "";
        else {
          try {
            String s = edu.rice.cs.util.FileOps.stringMakeRelativeTo(f, _rootFile);
            s = s.substring(0, s.lastIndexOf(".class"));
            s = s.replace(java.io.File.separatorChar, '.').replace('$', '.');
            int pos = 0;
            boolean ok = true;
            while((pos = s.indexOf('.', pos)) >= 0) {
              if ((s.length() <= pos + 1) || (Character.isDigit(s.charAt(pos + 1)))) {
                ok = false;
                break;
              }
              ++pos;
            }
            if (ok) return s;
            return "";
          }
          catch(IOException e) { return ""; }
        }
      }
    };
    _mainClassField.getTextField().getDocument().addDocumentListener(new DocumentListener() {
      public void insertUpdate(DocumentEvent e) { setEnabled(); }
      public void removeUpdate(DocumentEvent e) { setEnabled(); }
      public void changedUpdate(DocumentEvent e) { setEnabled(); }
      private void setEnabled() { 
            assert EventQueue.isDispatchThread();
            _okButton.setEnabled(true); 
      }
    });
    JPanel p = new JPanel();
    p.setLayout(new BorderLayout());
    _mainClassLabel = new JLabel("Main class:  ");
    _mainClassLabel.setLabelFor(_mainClassField);
    p.add(_mainClassLabel, BorderLayout.WEST);
    p.add(_mainClassField, BorderLayout.CENTER);
    return p;
  }
