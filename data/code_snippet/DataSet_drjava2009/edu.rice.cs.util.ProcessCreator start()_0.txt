  public Process start() throws IOException {
    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);
    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);
    File dir = null;
    if (!_evaluatedWorkDir.trim().equals("")) { dir = new File(_evaluatedWorkDir); }
    
    String[] env = null;
    if ((_env != null) && (_env.size() > 0)) {
      env = new String[_env.size()];
      int i = 0;
      for(String key: _env.keySet()) {
        String value = _env.get(key);
        env[i] = key+"="+value;
      }
    }
    
    if (_cmdline != null) {
      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);
      List<List<List<String>>> seqs = StringOps.commandLineToLists(_evaluatedCmdLine);
      if (seqs.size() != 1) { throw new IllegalArgumentException("ProcessCreator needs a command line with just one process."); }
      List<List<String>> pipe = seqs.get(0);
      if (pipe.size()<1) { throw new IllegalArgumentException("ProcessCreator needs a command line with just one process."); }
      List<String> cmds = pipe.get(0);
      _cmdarray = new String[cmds.size()];
      for (int i = 0; i < cmds.size(); ++i) {
        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));
      }
    }
    
    return Runtime.getRuntime().exec(_cmdarray,env,dir);
  }
