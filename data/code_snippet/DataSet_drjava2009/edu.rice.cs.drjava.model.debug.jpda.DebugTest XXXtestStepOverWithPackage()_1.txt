  public synchronized void XXXtestStepOverWithPackage() throws Exception {
    _log.log("----testStepOverWithPackage----");
    StepTestListener debugListener = new StepTestListener();
    _debugger.addListener(debugListener);
    
    File aDir = new File(_tempDir, "a");
    aDir.mkdir();
    File file = new File(aDir, "DrJavaDebugClassWithPackage.java");
    
    OpenDefinitionsDocument doc = _startupDebugger(file, DEBUG_CLASS_WITH_PACKAGE);
    
    _debugger.toggleBreakpoint(doc,DEBUG_CLASS_WITH_PACKAGE.indexOf("foo line 1"), true);
    
    Utilities.clearEventQueue();
    debugListener.assertRegionAddedCount(1);
    
    synchronized(_notifierLock) {
      interpretIgnoreResult("new a.DrJavaDebugClassWithPackage().foo()");
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    
    _log.log("----After breakpoint:\n" + getInteractionsText());
    
    debugListener.assertCurrThreadResumedCount(0);
    debugListener.assertCurrThreadDiedCount(0);
    assertInteractionsDoesNotContain("foo line 1");
    
    synchronized(_notifierLock) {
      _asyncStep(Debugger.StepType.STEP_OVER);
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    debugListener.assertBreakpointReachedCount(1);
    debugListener.assertCurrThreadDiedCount(0);
    assertInteractionsContains("foo line 1");
    assertInteractionsDoesNotContain("foo line 2");
    
    synchronized(_notifierLock) {
      _asyncStep(Debugger.StepType.STEP_OVER);
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    
    _log.log("****"+getInteractionsText());
    debugListener.assertCurrThreadDiedCount(0);
    debugListener.assertBreakpointReachedCount(1);
    assertInteractionsContains("foo line 2");
    
    InterpretListener interpretListener = new InterpretListener();
    _model.addListener(interpretListener);
    synchronized(_notifierLock) {
      _asyncResume();
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    interpretListener.assertInteractionEndCount(1);
    _model.removeListener(interpretListener);
    
    _log.log("----After resume:\n" + getInteractionsText());
    debugListener.assertBreakpointReachedCount(1);
    debugListener.assertThreadLocationUpdatedCount(3);
    debugListener.assertCurrThreadSuspendedCount(3);
    
    
    _shutdownWithoutSuspendedInteraction();
    _debugger.removeListener(debugListener);
  }
