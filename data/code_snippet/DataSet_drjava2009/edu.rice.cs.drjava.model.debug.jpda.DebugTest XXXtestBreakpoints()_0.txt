  public synchronized void XXXtestBreakpoints() throws Exception {
    _log.log("----testBreakpoints----");
    BreakpointTestListener debugListener = new BreakpointTestListener();
    _debugger.addListener(debugListener);
    
    OpenDefinitionsDocument doc = _startupDebugger("DrJavaDebugClass.java",
                                                   DEBUG_CLASS);
    
    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf("bar();"),true);
    
    Utilities.clearEventQueue();
    debugListener.assertRegionAddedCount(1);
    
    synchronized(_notifierLock) {
      interpretIgnoreResult("new DrJavaDebugClass().foo()");
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    
    _log.log("----After breakpoint:\n" + getInteractionsText());
    
    debugListener.assertCurrThreadResumedCount(0);
    debugListener.assertCurrThreadDiedCount(0);
    assertInteractionsContains("Foo Line 1");
    assertInteractionsDoesNotContain("Bar Line 1");
    
    _log.log("adding another breakpoint");
    
    _debugger.toggleBreakpoint(doc, DEBUG_CLASS.indexOf("System.out.println(\"Bar Line 2\")"), true);
    
    Utilities.clearEventQueue();
    debugListener.assertRegionAddedCount(2);
    
    synchronized(_notifierLock) {
      _log.log("resuming");
      _asyncResume();
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    _log.log("----After one resume:\n" + getInteractionsText());
    debugListener.assertCurrThreadDiedCount(0);
    assertInteractionsContains("Bar Line 1");
    assertInteractionsDoesNotContain("Bar Line 2");
    
    InterpretListener interpretListener = new InterpretListener();
    _model.addListener(interpretListener);
    synchronized(_notifierLock) {
      _log.log("-------- Resuming --------");
      _asyncResume();
      while (_pendingNotifies > 0) _notifierLock.wait();
    }
    interpretListener.assertInteractionEndCount(1);
    _model.removeListener(interpretListener);
    
    _log.log("----After second resume:\n" + getInteractionsText());
    debugListener.assertBreakpointReachedCount(2);
    debugListener.assertThreadLocationUpdatedCount(2);
    debugListener.assertCurrThreadSuspendedCount(2);
    assertInteractionsContains("Foo Line 3");
    
    _shutdownWithoutSuspendedInteraction();
    _debugger.removeListener(debugListener);
  }
