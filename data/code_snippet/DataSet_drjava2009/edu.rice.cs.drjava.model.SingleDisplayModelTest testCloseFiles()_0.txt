  public void testCloseFiles() throws BadLocationException {
    SDTestListener listener = new SDTestListener() {
      public synchronized boolean canAbandonFile(OpenDefinitionsDocument doc) {
        canAbandonCount++;
      }
      public synchronized void newFileCreated(OpenDefinitionsDocument doc) { newCount++; }
      public synchronized void fileClosed(OpenDefinitionsDocument doc) { closeCount++; }
      public synchronized void activeDocumentChanged(OpenDefinitionsDocument doc) { switchCount++; }
      public synchronized void interpreterReady(File wd) { interpreterReadyCount++; }
    };
    _model.addListener(listener);
    
    OpenDefinitionsDocument doc1 = _model.getActiveDocument();
    changeDocumentText(FOO_TEXT, doc1);
    OpenDefinitionsDocument doc2 = setupDocument(BAR_TEXT);
    assertActiveDocument(doc2);
    assertNumOpenDocs(2);
    listener.assertNewCount(1);
    listener.assertSwitchCount(1);
    listener.assertInterpreterResettingCount(0);

    _model.closeFile(_model.getActiveDocument());
    assertNumOpenDocs(1);
    listener.assertCloseCount(1);
    listener.assertAbandonCount(1);
    listener.assertSwitchCount(2);
    listener.assertInterpreterResettingCount(0);
    assertActiveDocument(doc1);
    assertContents(FOO_TEXT, _model.getActiveDocument());

    _model.closeFile(_model.getActiveDocument());
    listener.assertCloseCount(2);
    listener.assertAbandonCount(2);
    listener.assertInterpreterResettingCount(0);

    assertNumOpenDocs(1);
    listener.assertNewCount(2);
    listener.assertSwitchCount(3);
    listener.assertInterpreterResettingCount(0);
    assertLength(0, _model.getActiveDocument());
    
    _log.log("Starting second phase of testCloseFiles");

    doc1 = _model.getActiveDocument();
    changeDocumentText(FOO_TEXT, doc1);
    doc2 = setupDocument(BAR_TEXT);
    assertNumOpenDocs(2);
    listener.assertNewCount(3);
    listener.assertInterpreterResettingCount(0);
    
    _log.log("Just before calling _model.closeAllFiles()");
    Utilities.invokeAndWait(new Runnable() { public void run() { _model.closeAllFiles(); } });
    Utilities.clearEventQueue();
    Utilities.clearEventQueue();
    listener.assertInterpreterReadyCount(1);
    assertNumOpenDocs(1);
    assertLength(0, _model.getActiveDocument());
    
    listener.assertNewCount(4);
    listener.assertCloseCount(4);
    listener.assertAbandonCount(4);
    
    _model.removeListener(listener);
  }
