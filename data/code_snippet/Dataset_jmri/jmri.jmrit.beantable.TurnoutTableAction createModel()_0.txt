    void createModel() {
        closedText = InstanceManager.turnoutManagerInstance().getClosedText();
        thrownText = InstanceManager.turnoutManagerInstance().getThrownText();
        
        m = new BeanTableDataModel() {
        	static public final int INVERTCOL = NUMCOLUMN;
                static public final int LOCKCOL = INVERTCOL+1;
                static public final int KNOWNCOL = LOCKCOL+1;
                static public final int MODECOL = KNOWNCOL+1;
                static public final int SENSOR1COL = MODECOL+1;
                static public final int SENSOR2COL = SENSOR1COL+1;
                static public final int OPSONOFFCOL = SENSOR2COL+1;
                static public final int OPSEDITCOL = OPSONOFFCOL+1;
                static public final int LOCKOPRCOL = OPSEDITCOL+1;
                static public final int LOCKDECCOL = LOCKOPRCOL+1;
		
                static public final int xLOCKOPRCOL = LOCKCOL+1;
                static public final int xLOCKDECCOL = xLOCKOPRCOL+1;
                
    		public int getColumnCount(){ 
                    if (showLock && showFeedback)
                        return LOCKDECCOL+1;
    		    if (showFeedback)
    		        return OPSEDITCOL+1;
    		    if (showLock)
    		    	return xLOCKDECCOL+1;
    		    else
    		        return LOCKCOL+1;
     		}
    		
    		public String getColumnName(int col) {
                    if (col==INVERTCOL) return "Inverted";
                    else if (col==LOCKCOL) return "Locked";
                    else if (col==KNOWNCOL && showFeedback) return "Feedback";
                    else if (col==MODECOL && showFeedback) return "Mode";
                    else if (col==SENSOR1COL) return "Sensor 1";
                    else if (col==SENSOR2COL) return "Sensor 2";
                    else if (col==OPSONOFFCOL) return "Automate";
                    else if (col==OPSEDITCOL) return "";  
                    else if (col==LOCKOPRCOL || col==xLOCKOPRCOL) return "Lock Mode";
                    else if (col==LOCKDECCOL || col==xLOCKDECCOL) return "Decoder";
                    
                    
                    else return super.getColumnName(col);
                }
    		public Class getColumnClass(int col) {
                    if (col==INVERTCOL) return Boolean.class;
                    else if (col==LOCKCOL) return Boolean.class;
                    else if (col==KNOWNCOL && showFeedback) return String.class;
                    else if (col==MODECOL && showFeedback) return JComboBox.class;
                    else if (col==SENSOR1COL) return String.class;
                    else if (col==SENSOR2COL) return String.class;
                    else if (col==OPSONOFFCOL) return JComboBox.class;
                    else if (col==OPSEDITCOL) return JButton.class;
                    else if (col==LOCKOPRCOL || col==xLOCKOPRCOL) return JComboBox.class;
                    else if (col==LOCKDECCOL || col==xLOCKDECCOL) return JComboBox.class;
                    else return super.getColumnClass(col);
                }
    		public int getPreferredWidth(int col) {
                    if (col==INVERTCOL) return new JTextField(6).getPreferredSize().width;
                    else if (col==LOCKCOL) return new JTextField(6).getPreferredSize().width;
                    else if (col==KNOWNCOL && showFeedback) return new JTextField(10).getPreferredSize().width;
                    else if (col==MODECOL && showFeedback) return new JTextField(10).getPreferredSize().width;
                    else if (col==SENSOR1COL) return new JTextField(5).getPreferredSize().width;
                    else if (col==SENSOR2COL) return new JTextField(5).getPreferredSize().width;
                    else if (col==OPSONOFFCOL) return new JTextField(14).getPreferredSize().width;
                    else if (col==LOCKOPRCOL || col==xLOCKOPRCOL) return new JTextField(10).getPreferredSize().width;
                    else if (col==LOCKDECCOL || col==xLOCKDECCOL) return new JTextField(10).getPreferredSize().width;
                    else return super.getPreferredWidth(col);
                }
    		public boolean isCellEditable(int row, int col) {
                    String name = (String)sysNameList.get(row);
                    TurnoutManager manager = InstanceManager.turnoutManagerInstance();
                    Turnout t = manager.getBySystemName(name);
                    if (col==INVERTCOL) return t.canInvert();
                    else if (col == LOCKCOL)return t.canLock(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT);
                    else if (col==KNOWNCOL && showFeedback) return false;
                    else if (col==MODECOL && showFeedback) return true;
                    else if (col==SENSOR1COL) return true;
                    else if (col==SENSOR2COL) return true;
                    else if (col==OPSONOFFCOL) return true;
                    else if (col==OPSEDITCOL) return t.getTurnoutOperation()!=null;
                    else if (col==LOCKOPRCOL || col==xLOCKOPRCOL) return true;
                    else if (col==LOCKDECCOL || col==xLOCKDECCOL) return true;
                    else return super.isCellEditable(row,col);
                }    		
                
    		public Object getValueAt(int row, int col) {
                    String name = (String)sysNameList.get(row);
                    TurnoutManager manager = InstanceManager.turnoutManagerInstance();
                    Turnout t = manager.getBySystemName(name);
                    if (col==INVERTCOL) {
                        boolean val = t.getInverted();
                        return new Boolean(val);
                    } else if (col==LOCKCOL){
                        boolean val = t.getLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT);
                        return new Boolean(val);
                    } else if (col == LOCKOPRCOL || (col==xLOCKOPRCOL && !showFeedback)) {
                        JComboBox c = new JComboBox(lockOperations);
                        if (t.canLock(Turnout.CABLOCKOUT) && t.canLock(Turnout.PUSHBUTTONLOCKOUT)){
                            c.setSelectedItem (bothText); 
                        } else if (t.canLock(Turnout.PUSHBUTTONLOCKOUT)){
                            c.setSelectedItem (pushbutText);
                        } else if (t.canLock(Turnout.CABLOCKOUT)){
                            c.setSelectedItem (cabOnlyText);
                        }else {
                        	c.setSelectedItem (noneText);
                        }
                        return c;
                    } else if (col == LOCKDECCOL || (col==xLOCKDECCOL && !showFeedback)) {
                        JComboBox c = new JComboBox(t.getValidDecoderNames());
                        c.setSelectedItem (t.getDecoderName());
                        return c;
                    } else if (col==KNOWNCOL && showFeedback) {
                        if (t.getKnownState()==Turnout.CLOSED) return closedText;
                        if (t.getKnownState()==Turnout.THROWN) return thrownText;
                        if (t.getKnownState()==Turnout.INCONSISTENT) return "Inconsistent";
                        else return "Unknown";
                    } else if (col==MODECOL && showFeedback) {
                        JComboBox c = new JComboBox(t.getValidFeedbackNames());
                        c.setSelectedItem(t.getFeedbackModeName());
                        return c;
                    } else if (col==SENSOR1COL) {
                        Sensor s = t.getFirstSensor();
                        if (s!=null) return s.getSystemName();
                        else return "";
                    } else if (col==SENSOR2COL) {
                        Sensor s = t.getSecondSensor();
                        if (s!=null) return s.getSystemName();
                        else return "";
                    } else if (col==OPSONOFFCOL) {
                        return makeAutomationBox(t);
                    } else if (col==OPSEDITCOL) {
                        return AbstractTableAction.rb.getString("EditTurnoutOperation");
                    } else return super.getValueAt(row, col);
                }    		
		
    		public void setValueAt(Object value, int row, int col) {
                    String name = (String)sysNameList.get(row);
                    TurnoutManager manager = InstanceManager.turnoutManagerInstance();
                    Turnout t = manager.getBySystemName(name);
                    if (col == INVERTCOL) {
                        if (t.canInvert()) {
                            boolean b = ((Boolean) value).booleanValue();
                            t.setInverted(b);
                        }
                    } else if (col == LOCKCOL) {
                        boolean b = ((Boolean) value).booleanValue();
                        t.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT,	b);
                    } else if (col == MODECOL && showFeedback) {
                        String modeName = (String)((JComboBox)value).getSelectedItem();
                        t.setFeedbackMode(modeName);
                    } else if (col==SENSOR1COL) {
                        String sname = (String)value;
                        Sensor s;
                        if (!sname.equals("")) s = InstanceManager.sensorManagerInstance().provideSensor((String)value);
                        else s = null;
                        t.provideFirstFeedbackSensor(s);
                    } else if (col==SENSOR2COL) {
                        String sname = (String)value;
                        Sensor s;
                        if (!sname.equals("")) s = InstanceManager.sensorManagerInstance().provideSensor((String)value);
                        else s = null;
                        t.provideSecondFeedbackSensor(s);
                    } else if (col==OPSONOFFCOL) {
                    } else if (col==OPSEDITCOL) {
                        t.setInhibitOperation(false);
                        editTurnoutOperation(t, (JComboBox)getValueAt(row,OPSONOFFCOL));
                    } else if (col == LOCKOPRCOL || (col==xLOCKOPRCOL && !showFeedback)) {
                        String lockOpName = (String) ((JComboBox) value)
                            .getSelectedItem();
                        if (lockOpName.equals(bothText)){
                            t.enableLockOperation(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT, true);
                        }
                        if (lockOpName.equals(cabOnlyText)) {
                            t.enableLockOperation(Turnout.CABLOCKOUT, true);
                            t.enableLockOperation(Turnout.PUSHBUTTONLOCKOUT, false);
                        }
                        if (lockOpName.equals(pushbutText)) {
                            t.enableLockOperation(Turnout.CABLOCKOUT, false);
                            t.enableLockOperation(Turnout.PUSHBUTTONLOCKOUT, true);
                        }
                    } else if (col == LOCKDECCOL || (col==xLOCKDECCOL && !showFeedback)) {
                        String decoderName = (String)((JComboBox)value).getSelectedItem();
                        t.setDecoderName(decoderName);
                    } else super.setValueAt(value, row, col);
    		}
                
                public String getValue(String name) {
                    int val = InstanceManager.turnoutManagerInstance().getBySystemName(name).getCommandedState();
                    switch (val) {
                    case Turnout.CLOSED: return closedText;
                    case Turnout.THROWN: return thrownText;
                    case Turnout.UNKNOWN: return rbean.getString("BeanStateUnknown");
                    case Turnout.INCONSISTENT: return rbean.getString("BeanStateInconsistent");
                    default: return "Unexpected value: "+val;
                    }
                }
                public Manager getManager() { return InstanceManager.turnoutManagerInstance(); }
                public NamedBean getBySystemName(String name) { return InstanceManager.turnoutManagerInstance().getBySystemName(name);}
                public NamedBean getByUserName(String name) { return InstanceManager.turnoutManagerInstance().getByUserName(name);}
                public void clickOn(NamedBean t) {
                    int state = ((Turnout)t).getCommandedState();
                    if (state==Turnout.CLOSED) ((Turnout)t).setCommandedState(Turnout.THROWN);
                    else ((Turnout)t).setCommandedState(Turnout.CLOSED);
                }
                
                public void configureTable(JTable table) {
                    table.setDefaultRenderer(Boolean.class, new EnablingCheckboxRenderer());
                    table.setDefaultRenderer(JComboBox.class, new jmri.jmrit.symbolicprog.ValueRenderer());
                    table.setDefaultEditor(JComboBox.class, new jmri.jmrit.symbolicprog.ValueEditor());
                    if(showFeedback)
                        setColumnToHoldButton(table,OPSEDITCOL,editButton());
                    super.configureTable(table);
                }
                
                boolean matchPropertyName(java.beans.PropertyChangeEvent e) {
                    if (e.getPropertyName().equals("locked")) return true;
                    if (e.getPropertyName().equals("feedbackchange")) return true;
                    else return super.matchPropertyName(e);
                }
                
            };  
    }
