    public String oneInstructionString() {
        String args;
        String arg1Val;
        String arg2Val;
        String arg3Val;
        String temp1, temp2;
        
        switch (modType) {
        case MTYPE_TIME:
            args = argVal();
            return name()+' '+modTypeVal()+","+args+'\n';
            
        case MTYPE_GAIN:
            if ((arg1&0xE0)==IMMED_GAIN_MODIFY ) {
                if (arg1==IMMED_GAIN_MODIFY ) {
                    arg1Val = "IMMED_GAIN_MODIFY";
                } else {
                    arg1Val = "IMMED_GAIN_MODIFY+0x"+StringUtil.twoHexFromInt(arg1&0x1f);
                }
            } else if ((arg1&0xE0)==ANALOG_GAIN_MODIFY) {
                if (arg1==ANALOG_GAIN_MODIFY) {
                    arg1Val = "ANALOG_GAIN_MODIFY";
                } else {
                    arg1Val = "ANALOG_GAIN_MODIFY+"+
                                StringUtil.getNameFromState(arg1&0x1f,workRegCodes,workRegNames);
                }
            } else {
                arg1Val = StringUtil.twoHexFromInt(arg1);
            }
            arg2Val = StringUtil.getNameFromState(arg2,fixedCVCodes,fixedCVNames);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);
            arg3Val = decodeFlags(arg3,arg3ModCodes,arg3ModMasks,arg3ModNames);
            if (arg3Val == null) arg3Val = "0x"+StringUtil.twoHexFromInt(arg3);
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_PITCH:
            if ((arg1&0xE0)==CV_PITCH_MODIFY) {
                if (arg1==CV_PITCH_MODIFY) {
                    arg1Val = "CV_PITCH_MODIFY";
                } else {
                    arg1Val = "CV_PITCH_MODIFY+0x"+StringUtil.twoHexFromInt(arg1&0x1f);
                }
            } else if ((arg1&0xE0)==ANALOG_PITCH_MODIFY) {
                if (arg1==ANALOG_PITCH_MODIFY) {
                    arg1Val = "ANALOG_PITCH_MODIFY";
                } else {
                    arg1Val = "ANALOG_PITCH_MODIFY+"+
                                StringUtil.getNameFromState(arg1&0x1f,workRegCodes,workRegNames);
                }
            } else {
                arg1Val = StringUtil.twoHexFromInt(arg1);
            }
            arg2Val = StringUtil.getNameFromState(arg2,maxPCodes,maxPNames);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);
            arg3Val = StringUtil.getNameFromState(arg3,ditherPCodes,ditherPNames);
            if (arg3Val == null) arg3Val = "0x"+StringUtil.twoHexFromInt(arg3);
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_BLEND:
            arg1Val = decodeFlags(arg1,blendArg1Codes,blendArg1Masks,blendArg1Names);

            arg2Val = StringUtil.getNameFromState(arg2,blendArg2Codes,blendArg2Names);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);

            arg3Val = StringUtil.getNameFromState(arg3,blendArg3Codes,blendArg3Names);
            if (arg3Val == null) arg3Val = "0x"+StringUtil.twoHexFromInt(arg3);
                
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_SCATTER:
            arg1Val = StringUtil.getNameFromState(arg1&0x38,scatCommandCodes,scatCommandNames)
                 +"+"+StringUtil.getNameFromState(arg1&0x03,scatChannelCodes,scatChannelNames);

            arg2Val = StringUtil.getNameFromState(arg2,fixedCVCodes,fixedCVNames);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);

            arg3Val = StringUtil.getNameFromState(arg3,sintenCodes,sintenNames);
            if (arg3Val == null) arg3Val = "0x"+StringUtil.twoHexFromInt(arg3);
                
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_SNDCV:
            arg1Val = StringUtil.getNameFromState(arg1,fixedCVCodes,fixedCVNames);
            if (arg1Val == null) arg1Val = "0x"+StringUtil.twoHexFromInt(arg1);
            arg2Val = ""+arg2;
            arg3Val = ""+arg3;
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_WORK_IMMED:
            temp1 = StringUtil.getNameFromState(arg1&0xE0,arg1ModCodes,arg1ModNames);
            temp2 = StringUtil.getNameFromState(arg1&0x1F,workRegCodes,workRegNames);
            if (temp1!=null && temp2!=null) {
                arg1Val = temp1+"+"+temp2;
            } else if (temp1!=null && temp2==null) {
                arg1Val = temp1;
            } else if (temp1==null && temp2!=null) {
                arg1Val = temp2;
            } else {
            }
            arg2Val = StringUtil.getNameFromState(arg2,maxPCodes,maxPNames);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);
            
            arg3Val = ""+arg3;

            if ((arg1&0x1F) == WORK_STATUS_BITS) 
                arg2Val = decodeFlags(arg2,workStatusBitCodes,workStatusBitCodes,workStatusBitNames);
            if ((arg1&0x1F) == WORK_GLBL_GAIN && arg2 == DEFAULT_GLBL_GAIN)
                arg2Val = "DEFAULT_GLBL_GAIN";
            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
            
        case MTYPE_WORK_INDIRECT:
            temp1 = StringUtil.getNameFromState(arg1&0xE0,arg1ModCodes,arg1ModNames);
            temp2 = StringUtil.getNameFromState(arg1&0x1F,workRegCodes,workRegNames);
            if (temp1!=null && temp2!=null) {
                arg1Val = temp1+"+"+temp2;
            } else if (temp1!=null && temp2==null) {
                arg1Val = temp1;
            } else if (temp1==null && temp2!=null) {
                arg1Val = temp2;
            } else {
            }
            arg2Val = StringUtil.getNameFromState(arg2&0x1F,workRegCodes,workRegNames);
            if (arg2Val == null) arg2Val = "0x"+StringUtil.twoHexFromInt(arg2);
            
            arg3Val = ""+arg3;

            return name()+' '+modTypeVal()+","+arg1Val+","+arg2Val+","+arg3Val+'\n';
        }
        return "<could not parse, should not happen>";
    }
