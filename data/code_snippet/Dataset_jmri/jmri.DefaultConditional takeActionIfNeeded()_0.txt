	private void takeActionIfNeeded() {
		for (int i = 0;i<2;i++) {
			if ( ((currentState==TRUE) && (actionOption[i]==ACTION_OPTION_ON_CHANGE_TO_TRUE)) ||
				((currentState==FALSE) && (actionOption[i]==ACTION_OPTION_ON_CHANGE_TO_FALSE)) ||
					(actionOption[i]==ACTION_OPTION_ON_CHANGE) ) {
				SignalHead h = null;
				Logix x = null;		
				switch (actionType[i]) {
					case Conditional.ACTION_NONE:
						break;
					case Conditional.ACTION_SET_TURNOUT:
						Turnout t = InstanceManager.turnoutManagerInstance().
									getTurnout(actionName[i]);
						if (t == null) {
							log.error("invalid turnout name in action - "+actionName[i]);
						}
						else {
							t.setCommandedState(actionData[i]);
						}
						break;
					case Conditional.ACTION_DELAYED_TURNOUT:
						if (!mDelayTimerActive[i]) {
							if (mDelayTimer[i]==null) {
								mDelayListener[i] = new TimeTurnout(i);
								mDelayTimer[i] = new Timer(2000,
															mDelayListener[i]);
								mDelayTimer[i].setRepeats(false);
							}
							mDelayTimer[i].setInitialDelay(actionDelay[i]*1000);
							mDelayTimerActive[i] = true;
							mDelayTimer[i].start();
						}
						else {
							log.warn("timer already active on request to start delayed turnout action - "+
																				actionName[i]);
						}
						break;
					case Conditional.ACTION_RESET_DELAYED_TURNOUT:
						if (mDelayTimerActive[i]) {
							mDelayTimer[i].stop();
							mDelayTimerActive[i] = false;
						}
						else if (mDelayTimer[i]==null) {
							mDelayListener[i] = new TimeTurnout(i);
							mDelayTimer[i] = new Timer(2000,mDelayListener[i]);
							mDelayTimer[i].setRepeats(false);
						}
						mDelayTimer[i].setInitialDelay(actionDelay[i]*1000);
						mDelayTimerActive[i] = true;
						mDelayTimer[i].start();
						break;
					case Conditional.ACTION_CANCEL_TURNOUT_TIMERS:
						ConditionalManager cmg = jmri.InstanceManager.conditionalManagerInstance();
						java.util.Iterator iter = cmg.getSystemNameList().iterator();
						while (iter.hasNext()) {
							String sname = (String)iter.next();
							if (sname==null) 
								log.error("Conditional system name null during cancel turnput timers for "
														+ actionName[i]);
							Conditional c = cmg.getBySystemName(sname);
							if (c==null)
								log.error("Conditional null during cancel turnout timers for "
														+ actionName[i]);
							else {
								c.cancelTurnoutTimer(actionName[i]);
							}
						}						
						break;
					case Conditional.ACTION_LOCK_TURNOUT:
						Turnout tl = InstanceManager.turnoutManagerInstance().
									getTurnout(actionName[i]);
						if (tl == null) {
							log.error("invalid turnout name in action - "+actionName[i]);
						}
						else {
							if (actionData[i] == Turnout.LOCKED){
								tl.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT, true);
							}
							else if (actionData[i] == Turnout.UNLOCKED){
								tl.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT, false);
							}
						}
						break;
					case Conditional.ACTION_SET_SIGNAL_APPEARANCE:
						h = InstanceManager.signalHeadManagerInstance().
									getSignalHead(actionName[i]);
						if (h == null) {
							log.error("invalid signal head name in action - "+actionName[i]);
						}
						else {
							h.setAppearance(actionData[i]);
						}
						break;
					case Conditional.ACTION_SET_SIGNAL_HELD:
						h = InstanceManager.signalHeadManagerInstance().
									getSignalHead(actionName[i]);
						if (h == null) {
							log.error("invalid signal head name in action - "+actionName[i]);
						}
						else {
							h.setHeld(true);
						}
						break;
					case Conditional.ACTION_CLEAR_SIGNAL_HELD:
						h = InstanceManager.signalHeadManagerInstance().
									getSignalHead(actionName[i]);
						if (h == null) {
							log.error("invalid signal head name in action - "+actionName[i]);
						}
						else {
							h.setHeld(false);
						}
						break;
					case Conditional.ACTION_SET_SIGNAL_DARK:
						h = InstanceManager.signalHeadManagerInstance().
									getSignalHead(actionName[i]);
						if (h == null) {
							log.error("invalid signal head name in action - "+actionName[i]);
						}
						else {
							h.setLit(false);
						}
						break;
					case Conditional.ACTION_SET_SIGNAL_LIT:
						h = InstanceManager.signalHeadManagerInstance().
									getSignalHead(actionName[i]);
						if (h == null) {
							log.error("invalid signal head name in action - "+actionName[i]);
						}
						else {
							h.setLit(true);
						}
						break;
					case Conditional.ACTION_TRIGGER_ROUTE:
						Route r = InstanceManager.routeManagerInstance().
									getRoute(actionName[i]);
						if (r == null) {
							log.error("invalid route name in action - "+actionName[i]);
						}
						else {
							r.setRoute();
						}
						break;
					case Conditional.ACTION_SET_SENSOR:
						Sensor sn = InstanceManager.sensorManagerInstance().
									getSensor(actionName[i]);
						if (sn == null) {
							log.error("invalid sensor name in action - "+actionName[i]);
						}
						else {
							try {
								sn.setKnownState(actionData[i]);
							} 
							catch (JmriException e) {
								log.warn("Exception setting sensor "+actionName[i]+" in action");
							}
						}
						break;
					case Conditional.ACTION_DELAYED_SENSOR:
						if (!mDelayTimerActive[i]) {
							if (mDelayTimer[i]==null) {
								mDelayListener[i] = new TimeSensor(i);
								mDelayTimer[i] = new Timer(2000,
															mDelayListener[i]);
								mDelayTimer[i].setRepeats(false);
							}
							mDelayTimer[i].setInitialDelay(actionDelay[i]*1000);
							mDelayTimerActive[i] = true;
							mDelayTimer[i].start();
						}
						else {
							log.warn("timer already active on request to start delayed sensor action - "+
																				actionName[i]);
						}
						break;
					case Conditional.ACTION_RESET_DELAYED_SENSOR:
						if (mDelayTimerActive[i]) {
							mDelayTimer[i].stop();
							mDelayTimerActive[i] = false;
						}
						else if (mDelayTimer[i]==null) {
							mDelayListener[i] = new TimeSensor(i);
							mDelayTimer[i] = new Timer(2000,mDelayListener[i]);
							mDelayTimer[i].setRepeats(false);
						}
						mDelayTimer[i].setInitialDelay(actionDelay[i]*1000);
						mDelayTimerActive[i] = true;
						mDelayTimer[i].start();
						break;
					case Conditional.ACTION_CANCEL_SENSOR_TIMERS:
						ConditionalManager cm = jmri.InstanceManager.conditionalManagerInstance();
						java.util.Iterator itr = cm.getSystemNameList().iterator();
						while (itr.hasNext()) {
							String sname = (String)itr.next();
							if (sname==null) 
								log.error("Conditional system name null during cancel sensor timers for "
														+ actionName[i]);
							Conditional c = cm.getBySystemName(sname);
							if (c==null)
								log.error("Conditional null during cancel sensor timers for "
														+ actionName[i]);
							else {
								c.cancelSensorTimer(actionName[i]);
							}
						}						
						break;
					case Conditional.ACTION_SET_LIGHT:
						Light lgt = InstanceManager.lightManagerInstance().
										getLight(actionName[i]);
						if (lgt == null) {
							log.error("invalid light name in action - "+actionName[i]);
						}
						else {
							lgt.setState(actionData[i]);
						}
						break;
					case Conditional.ACTION_SET_MEMORY:
						Memory m = InstanceManager.memoryManagerInstance().
										provideMemory(actionName[i]);
						if (m == null) {
							log.error("invalid memory name in action - "+actionName[i]);
						}
						else {
							m.setValue(actionString[i]);
						}
						break;
					case Conditional.ACTION_COPY_MEMORY:
						Memory mFrom = InstanceManager.memoryManagerInstance().
										provideMemory(actionName[i]);
						if (mFrom == null) {
							log.error("invalid memory name in action - "+actionName[i]);
						}
						else {
							Memory mTo = InstanceManager.memoryManagerInstance().
										provideMemory(actionString[i]);
							if (mTo == null) {
								log.error("invalid memory name in action - "+actionString[i]);
							}
							else {
								mTo.setValue(mFrom.getValue());
							}
						}
						break;
					case Conditional.ACTION_ENABLE_LOGIX:
						x = InstanceManager.logixManagerInstance().getLogix(actionName[i]);
						if (x == null) {
							log.error("invalid logix name in action - "+actionName[i]);
						}
						else {
							x.setEnabled(true);
						}
						break;
					case Conditional.ACTION_DISABLE_LOGIX:
						x = InstanceManager.logixManagerInstance().getLogix(actionName[i]);
						if (x == null) {
							log.error("invalid logix name in action - "+actionName[i]);
						}
						else {
							x.setEnabled(false);
						}
						break;
					case Conditional.ACTION_PLAY_SOUND:
						if (!(actionString[i].equals(""))) {
							if (snd[i] == null) {
								snd[i] = new jmri.jmrit.Sound(actionString[i]);
							}
							snd[i].play();
						}
						break;
					case Conditional.ACTION_RUN_SCRIPT:
						if (!(actionString[i].equals(""))) {
							jmri.util.PythonInterp.runScript(actionString[i]);
						}
						break;
					case Conditional.ACTION_SET_FAST_CLOCK_TIME:
						Date date = InstanceManager.timebaseInstance().getTime();
						date.setHours(actionData[i]/60);
						date.setMinutes(actionData[i] - ((actionData[i]/60)*60));
						date.setSeconds(0);
						InstanceManager.timebaseInstance().userSetTime(date);
						break;
					case Conditional.ACTION_START_FAST_CLOCK:
						InstanceManager.timebaseInstance().setRun(true);
						break;
					case Conditional.ACTION_STOP_FAST_CLOCK:
						InstanceManager.timebaseInstance().setRun(false);
						break;
				}
			}
		}
	}
