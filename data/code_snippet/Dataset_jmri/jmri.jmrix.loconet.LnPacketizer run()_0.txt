    public void run() {
        int opCode;
        while (true) {   
            try {
                while ( ((opCode = (readByteProtected(istream)&0xFF)) & 0x80) == 0 )  {
                    if (fulldebug && debug) log.debug("Skipping: "+Integer.toHexString(opCode));
                }
                if (fulldebug)
                    log.debug("(run) Start message with opcode: "+Integer.toHexString(opCode));
                LocoNetMessage msg = null;
                while (msg == null) {
                    try {
                        int byte2 = readByteProtected(istream)&0xFF;
                        if (fulldebug)
                            log.debug("Byte2: "+Integer.toHexString(byte2));
                        switch((opCode & 0x60) >> 5)
                            {
                            case 0:     /* 2 byte message */
                                msg = new LocoNetMessage(2);
                                break;

                            case 1:     /* 4 byte message */
                                msg = new LocoNetMessage(4);
                                break;

                            case 2:     /* 6 byte message */
                                msg = new LocoNetMessage(6);
                                break;

                            case 3:     /* N byte message */
                                if (byte2<2) log.error("LocoNet message length invalid: "+byte2
                                                       +" opcode: "+Integer.toHexString(opCode));
                                msg = new LocoNetMessage(byte2);
                                break;
                            }
                        msg.setOpCode(opCode);
                        msg.setElement(1, byte2);
                        int len = msg.getNumDataElements();
                        if (fulldebug) log.debug("len: "+len);
                        for (int i = 2; i < len; i++)  {
                            int b = readByteProtected(istream)&0xFF;
                            if (fulldebug) log.debug("char "+i+" is: "+Integer.toHexString(b));
                            if ( (b&0x80) != 0) {
                                log.warn("LocoNet message with opCode: "
                                         +Integer.toHexString(opCode)
                                         +" ended early. Expected length: "+len
                                         +" seen length: "+i
                                         +" unexpected byte: "
                                         +Integer.toHexString(b));
                                opCode = b;
                                throw new LocoNetMessageException();
                            }
                            msg.setElement(i, b);
                        }
                    }
                    catch (LocoNetMessageException e) {
                        msg = null;
                    }
                }
                if (!msg.checkParity()) {
                    log.warn("Ignore Loconet packet with bad checksum: "+msg.toString());
                    throw new LocoNetMessageException();
                }
             	{
                    final LocoNetMessage thisMsg = msg;
                    final LnPacketizer thisTC = this;
                    Runnable r = new Runnable() {
                            LocoNetMessage msgForLater = thisMsg;
                            LnPacketizer myTC = thisTC;
                            public void run() {
                                myTC.notify(msgForLater);
                            }
                        };
                    javax.swing.SwingUtilities.invokeLater(r);
                }

            }
            catch (LocoNetMessageException e) {
            }
            catch (java.io.EOFException e) {
                log.debug("EOFException, is LocoNet serial I/O using timeouts?");
                e.printStackTrace();
            }
            catch (java.io.IOException e) {
                log.debug("IOException, should only happen with HexFIle: "+e);
                log.info("End of file");
                disconnectPort(controller);
                return;
            }
            catch (Exception e) {
                log.warn("run: unexpected exception: "+e);
            }
        } 
    }
