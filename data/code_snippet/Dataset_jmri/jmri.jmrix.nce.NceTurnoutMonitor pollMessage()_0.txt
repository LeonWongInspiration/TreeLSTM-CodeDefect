    public NceMessage pollMessage() {
    	
    	
        if (FeedbackChange || numTurnouts != NceTurnout.getNumNtTurnouts()) {
        	FeedbackChange = false;
            numTurnouts = NceTurnout.getNumNtTurnouts();	
            
            for (int block = 0; block < NUM_BLOCK; block++){

            	if (activeBlock[block] == false) {  

            		for (int i = 0; i < 128; i++) { 
            			int NTnum = 1 + i + (block*128);
            			Turnout mControlTurnout = InstanceManager.turnoutManagerInstance().getBySystemName("NT"+ NTnum);
            			if (mControlTurnout != null){
        					mControlTurnout.removePropertyChangeListener(this);
        					
             				if (mControlTurnout.getFeedbackMode()==Turnout.MONITORING) {
            					numActiveBlocks++;
            				}else{
             					mControlTurnout.addPropertyChangeListener(this);
            					if (log.isDebugEnabled() & debugTurnoutMonitor) {
            						log.debug("add turnout to listener NT" + NTnum  
            								+ " Feed back mode: " + mControlTurnout.getFeedbackMode());
            					}
            				}
            			}
            		}
            	}

            }
        }     
               
        if (numActiveBlocks<=0) {
        }
         	
		if (NceTurnoutMonitorThread == null) {
			NceTurnoutMonitorThread = new Thread(new Runnable() {
				public void run() {
					turnoutUpdate();
				}
			});
			NceTurnoutMonitorThread.setName("NCE Turnout Monitor");
			NceTurnoutMonitorThread.setPriority(Thread.MIN_PRIORITY);
			NceTurnoutMonitorThread.start();
		}
        
        while (true) { 
			currentBlock++;
			if (currentBlock >= NUM_BLOCK)
				currentBlock = 0;

			if (activeBlock[currentBlock]) {
				if (debugTurnoutMonitor && log.isDebugEnabled())
					log.debug("found turnouts block " + currentBlock);

				int nceAccAddress = CS_ACCY_MEMORY + currentBlock * BLOCK_LEN;
				byte[] bl = NceBinaryCommand.accMemoryRead(nceAccAddress);
				NceMessage m = NceMessage.createBinaryMessage(bl, REPLY_LEN);
				return m;
			}
		}
	}
