  public void run(){

    try {
      inStream = new BufferedReader( new InputStreamReader( clientSocket.getInputStream() ) );
      outStream = clientSocket.getOutputStream();

      msgQueue = new LinkedList() ;
      LnTrafficController.instance().addLocoNetListener( ~0, this );

      txThread = new Thread( new ClientTxHandler(this) ) ;
      txThread.setDaemon( true );
      txThread.setPriority( Thread.MAX_PRIORITY );
      txThread.setName( "ClientTxHandler:" + remoteAddress );
      txThread.start();

      while( !isInterrupted() ){
        inString = inStream.readLine();
        if(inString == null){
          log.debug( "ClientRxHandler: Remote Connection Closed" ) ;
          interrupt();
        }

        else
        {
          log.debug( "ClientRxHandler: Received: " + inString ) ;

          StringTokenizer st = new StringTokenizer(inString);
          if (st.nextToken().equals("SEND")) {
            LocoNetMessage msg = null;
            int opCode = Integer.parseInt(st.nextToken(), 16);
            int byte2 = Integer.parseInt(st.nextToken(), 16);

            switch ( (opCode & 0x60) >> 5) {
              case 0: /* 2 byte message */
                msg = new LocoNetMessage(2);
                break;

              case 1: /* 4 byte message */
                msg = new LocoNetMessage(4);
                break;

              case 2: /* 6 byte message */
                msg = new LocoNetMessage(6);
                break;

              case 3: /* N byte message */
                if (byte2 < 2) log.error("ClientRxHandler: LocoNet message length invalid: " +
                                         byte2 + " opcode: " +
                                         Integer.toHexString(opCode));
                msg = new LocoNetMessage(byte2);
                break;
            }
            msg.setOpCode(opCode);
            msg.setElement(1, byte2);
            int len = msg.getNumDataElements();

            for (int i = 2; i < len; i++) {
              int b = Integer.parseInt(st.nextToken(), 16);
              msg.setElement(i, b);
            }

            LnTrafficController.instance().sendLocoNetMessage(msg);
            lastSentMessage = msg ;
          }
        }
      }
    }
    catch (IOException ex) {
      log.debug( "ClientRxHandler: IO Exception: ", ex );
    }
    LnTrafficController.instance().removeLocoNetListener( ~0, this );
    txThread.interrupt();

    txThread = null ;
    inStream = null ;
    outStream = null ;
    msgQueue.clear();
    msgQueue = null ;

    try {
      clientSocket.close();
    }
    catch (IOException ex1) {}

    Server.getInstance().removeClient( this ) ;
    log.info( "ClientRxHandler: Exiting" );
  }
