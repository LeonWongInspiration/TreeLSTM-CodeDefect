    public void initComponents() throws Exception {
        setTitle(rb.getString("SimpleClockWindowTitle"));

        Container contentPane = getContentPane();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));

        clock = InstanceManager.timebaseInstance();
        if (clock==null) {
            log.error("Could not obtain a timebase instance.");
            setVisible(false);
            dispose();
            throw new jmri.JmriException("Could not obtain a timebase instance");
        }
		if (!clock.getIsInitialized()) {
			clock.initializeHardwareClock();
		}

        JPanel panel11 = new JPanel();
        panel11.add(new JLabel(rb.getString("TimeSource")+" "));
        timeSourceBox = new JComboBox();
        panel11.add(timeSourceBox);
        timeSourceBox.addItem(rb.getString("ComputerClock"));
		hardwareName = InstanceManager.clockControlInstance().getHardwareClockName();
		if (hardwareName!=null) timeSourceBox.addItem(hardwareName);
        timeSourceBox.setToolTipText(rb.getString("TipTimeSource"));
		timeSourceBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    setTimeSourceChanged();
                }
            });
        contentPane.add(panel11);
		if (hardwareName!=null) {
			if (clock.getInternalMaster()) timeSourceBox.setSelectedIndex(internalSourceIndex);
			else timeSourceBox.setSelectedIndex(hardwareSourceIndex);
			JPanel panel11x = new JPanel();
			synchronizeCheckBox = new JCheckBox(rb.getString("Synchronize")+" "+
							hardwareName);
			synchronizeCheckBox.setToolTipText(rb.getString("TipSynchronize"));
			synchronizeCheckBox.setSelected(clock.getSynchronize());
			synchronizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    synchronizeChanged();
                }
            });
			panel11x.add(synchronizeCheckBox);
			contentPane.add(panel11x);
			if (InstanceManager.clockControlInstance().canCorrectHardwareClock()) {
				JPanel panel11y = new JPanel();
				correctCheckBox = new JCheckBox(rb.getString("Correct"));
				correctCheckBox.setToolTipText(rb.getString("TipCorrect"));
				correctCheckBox.setSelected(clock.getCorrectHardware());
				correctCheckBox.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent e) {
						correctChanged();
					}
				});
				panel11y.add(correctCheckBox);
				contentPane.add(panel11y);
			}
			if (InstanceManager.clockControlInstance().canSet12Or24HourClock()) {
				JPanel panel11z = new JPanel();
				displayCheckBox = new JCheckBox(rb.getString("Display12Hour"));
				displayCheckBox.setToolTipText(rb.getString("TipDisplay"));
				displayCheckBox.setSelected(clock.use12HourDisplay());
				displayCheckBox.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent e) {
						displayChanged();
					}
				});
				panel11z.add(displayCheckBox);
				contentPane.add(panel11z);
			}
		}			

        JPanel panel12 = new JPanel();
        panel12.add(new JLabel(rb.getString("SpeedUpFactor")+" "));
        panel12.add(factorField);
        factorField.setText(threeDigits.format(clock.userGetRate()));
        factorField.setToolTipText(rb.getString("TipFactorField"));
        panel12.add(new JLabel(":1 "));
        setRateButton.setToolTipText(rb.getString("TipSetRateButton"));
        setRateButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    setRateButtonActionPerformed();
                }
            });
        panel12.add(setRateButton);
        contentPane.add(panel12);

        JPanel panel2 = new JPanel();
        panel2.add(new JLabel(rb.getString("NewTime")+" "));
        panel2.add(hoursField);
        hoursField.setText("00");
        hoursField.setToolTipText(rb.getString("TipHoursField"));
        panel2.add(new JLabel(":"));
        panel2.add(minutesField);
        minutesField.setText("00");
        minutesField.setToolTipText(rb.getString("TipMinutesField"));
        setTimeButton.setToolTipText(rb.getString("TipSetTimeButton"));
        setTimeButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    setTimeButtonActionPerformed();
                }
            });
        panel2.add(setTimeButton);
        contentPane.add(panel2);
		
		JPanel panel6 = new JPanel();
        panel6.setLayout(new BoxLayout(panel6, BoxLayout.Y_AXIS));
        JPanel panel61 = new JPanel();
		startStoppedCheckBox = new JCheckBox(rb.getString("StartStopped"));
		startStoppedCheckBox.setToolTipText(rb.getString("TipStartStopped"));
		startStoppedCheckBox.setSelected(clock.getStartStopped());
		startStoppedCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				startStoppedChanged();
			}
		});
		panel61.add(startStoppedCheckBox);
		panel6.add(panel61);
        JPanel panel62 = new JPanel();
		startSetTimeCheckBox = new JCheckBox(rb.getString("StartSetTime"));
		startSetTimeCheckBox.setToolTipText(rb.getString("TipStartSetTime"));
		startSetTimeCheckBox.setSelected(clock.getStartSetTime());
		startSetTimeCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				startSetTimeChanged();
			}
		});
		panel62.add(startSetTimeCheckBox);
		Date tem = clock.getStartTime();
		startHoursField.setText(""+tem.getHours());
		startHoursField.setToolTipText(rb.getString("TipStartHours"));
		panel62.add(startHoursField);
        panel62.add(new JLabel(":"));
		startMinutesField.setText(""+tem.getMinutes());
		startMinutesField.setToolTipText(rb.getString("TipStartMinutes"));
		panel62.add(startMinutesField);
        setStartTimeButton.setToolTipText(rb.getString("TipSetStartTimeButton"));
        setStartTimeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				startSetTimeChanged();
			}
		});
        panel62.add(setStartTimeButton);
		panel6.add(panel62);
		JPanel panel63 = new JPanel();
        panel63.add(new JLabel(rb.getString("StartClock")+" "));
		clockStartBox = new JComboBox();
        panel63.add(clockStartBox);
        clockStartBox.addItem(rb.getString("None"));
        clockStartBox.addItem(rbx.getString("MenuItemNixieClock"));
        clockStartBox.addItem(rbx.getString("MenuItemAnalogClock"));
        clockStartBox.addItem(rbx.getString("MenuItemLcdClock"));
		clockStartBox.setSelectedIndex(startNone);
		if (clock.getStartClockOption()==Timebase.NIXIE_CLOCK)
			clockStartBox.setSelectedIndex(startNixieClock);
		else if (clock.getStartClockOption()==Timebase.ANALOG_CLOCK)
			clockStartBox.setSelectedIndex(startAnalogClock);
		else if (clock.getStartClockOption()==Timebase.LCD_CLOCK)
			clockStartBox.setSelectedIndex(startLcdClock);
        clockStartBox.setToolTipText(rb.getString("TipClockStartOption"));
		clockStartBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				setClockStartChanged();
			}
		});
		panel6.add(panel63);
		
        Border panel6Border = BorderFactory.createEtchedBorder();
        Border panel6Titled = BorderFactory.createTitledBorder(panel6Border,
                                                rb.getString("BoxLabelStartUp"));
        panel6.setBorder(panel6Titled);
        contentPane.add(panel6);		

        JPanel panel3 = new JPanel();
        panel3.setLayout(new BoxLayout(panel3, BoxLayout.Y_AXIS));
        JPanel panel31 = new JPanel();

        panel31.add(clockStatus);
        panel3.add(panel31);
        JPanel panel32 = new JPanel();
        panel32.add(new JLabel(rb.getString("CurrentTime")+" "));
        setTimeLabel();
        panel32.add(timeLabel);
        panel3.add(panel32);
        Border panel3Border = BorderFactory.createEtchedBorder();
        Border panel3Titled = BorderFactory.createTitledBorder(panel3Border,
                                                rb.getString("BoxLabelClockState"));
        panel3.setBorder(panel3Titled);
        contentPane.add(panel3);

        JPanel panel4 = new JPanel();
        startButton.setToolTipText(rb.getString("TipStartButton"));
        startButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    startButtonActionPerformed();
                }
            });
        panel4.add(startButton);
        stopButton.setToolTipText(rb.getString("TipStopButton"));
        stopButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    stopButtonActionPerformed();
                }
            });
        panel4.add(stopButton);
        contentPane.add(panel4);

		updateRunningButton();

    	addHelpMenu("package.jmri.jmrit.simpleclock.SimpleClockFrame", true);

        pack();

        clock.addPropertyChangeListener(this);

        clock.addMinuteChangeListener( new java.beans.PropertyChangeListener() {
                    public void propertyChange(java.beans.PropertyChangeEvent e) {
                        updateTime();
                    }
                });

        return;
    }
