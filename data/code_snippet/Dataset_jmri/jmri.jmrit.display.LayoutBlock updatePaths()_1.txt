	public void updatePaths() {
		if ( (block!=null) && (panels.size()>0) ) {
			LayoutEditor panel = (LayoutEditor)panels.get(0);
			ArrayList c = panel.auxTools.getConnectivityList(_instance);
			if (panels.size()>1) {
				for (int i = 1;i < panels.size();i++) {
					if (c.size()<((LayoutEditor)panels.get(i)).auxTools.
										getConnectivityList(_instance).size()) {
						panel = (LayoutEditor)panels.get(i);
						c = panel.auxTools.getConnectivityList(_instance);
					}
				}
				for (int j = 0;j < panels.size();j++) {
					LayoutEditor tPanel = (LayoutEditor)panels.get(j);
					if ( (tPanel!=panel) && InstanceManager.layoutBlockManagerInstance().
								warn() && ( !compareConnectivity(c,
										tPanel.auxTools.getConnectivityList(_instance)) )  ) {
						int response = JOptionPane.showOptionDialog(null,
								java.text.MessageFormat.format(rb.getString("Warn1"),
								new String[]{blockName,tPanel.getLayoutName(),
								panel.getLayoutName()}),rb.getString("WarningTitle"),
								JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,
								null,new Object[] {rb.getString("ButtonOK"),
								rb.getString("ButtonOKPlus")},rb.getString("ButtonOK"));
						if (response!=0)
							InstanceManager.layoutBlockManagerInstance().turnOffWarning();						
					}
				}
			}
			updateBlockPaths(c,panel);
		}	
	}	
	private void updateBlockPaths(ArrayList c, LayoutEditor panel) {
		LayoutEditorAuxTools auxTools = new LayoutEditorAuxTools(panel);
		java.util.List paths = block.getPaths();
		boolean[] used = new boolean[c.size()];
		int[] need = new int[paths.size()];
		for (int j=0;j<c.size();j++) {used[j] = false;}
		for (int j=0;j<paths.size();j++) {need[j] = -1;}
		for (int i = 0;i<paths.size();i++) {
			jmri.Path p = (jmri.Path)paths.get(i);
			for (int j = 0;j<c.size();j++) {
				if (!used[j]) {
					LayoutConnectivity lc = (LayoutConnectivity)c.get(j);
					if ( (lc.getBlock1().getBlock()==p.getBlock()) ||
								(lc.getBlock2().getBlock()==p.getBlock()) ) {
						used[j] = true;
						need[i] = j;
					}
				}
			}
		}
		for (int i = 0;i<paths.size();i++) {
			if (need[i]>=0) {
				jmri.Path p = (jmri.Path)paths.get(i);
				LayoutConnectivity lc = (LayoutConnectivity)c.get(need[i]);
				if (lc.getBlock1()==_instance) {
					p.setToBlockDirection(lc.getDirection());
					p.setFromBlockDirection(lc.getReverseDirection());
				}
				else {
					p.setToBlockDirection(lc.getReverseDirection());
					p.setFromBlockDirection(lc.getDirection());
				}
				if (c.size()>2) auxTools.addBeanSettings(p,lc,_instance);
			}
		}	
		for (int i = 0;i<paths.size();i++) {
			if (need[i]<0) {				
				block.removePath((jmri.Path)paths.get(i));
			}
		}	
		for (int j = 0;j<c.size();j++) {
			if (!used[j]) {
				LayoutConnectivity lc = (LayoutConnectivity)c.get(j);
				jmri.Path newp = null;
				if (lc.getBlock1()==_instance) {
					newp = new jmri.Path(lc.getBlock2().getBlock(),lc.getDirection(),
									lc.getReverseDirection());
				}
				else {
					newp = new jmri.Path(lc.getBlock1().getBlock(),lc.getReverseDirection(),
									lc.getDirection());					
				}
				if (newp != null) block.addPath(newp);				
				else log.error("Trouble adding Path to block '"+blockName+"'.");
				if (c.size()>2) auxTools.addBeanSettings(newp,lc,_instance);
			}				
		}
/*		paths = block.getPaths();
		for (int i = 0;i<paths.size();i++) {
			jmri.Path p = (jmri.Path)paths.get(i);
			log.error("Block "+blockName+"- Path to "+p.getBlock().getUserName()+
						" - "+p.decodeDirection(p.getToBlockDirection()) );
			java.util.List beans = p.getSettings();
			for (int j=0;j<beans.size();j++) {
				jmri.BeanSetting be = (jmri.BeanSetting)beans.get(j);
				log.error("   BeanSetting - "+((jmri.Turnout)be.getBean()).getSystemName()+
								" with state "+be.getSetting()+" (2=CLOSED,4=THROWN)");
			}
		} */
	}
	private boolean compareConnectivity(ArrayList main, ArrayList test) {
		for (int i = 0;i<test.size();i++) {
			LayoutConnectivity lc = (LayoutConnectivity)test.get(i);
			boolean found = false;
			for (int j = 0;(j<main.size())&&!found;j++) {
				LayoutConnectivity mc = (LayoutConnectivity)main.get(j);
				if ( ((lc.getBlock1()==mc.getBlock1()) && (lc.getBlock2()==mc.getBlock2())) ||
					((lc.getBlock1()==mc.getBlock2()) && (lc.getBlock2()==mc.getBlock1())) )
					found = true;
			}
			if (!found) return false;
		}
		return (true);
	}
	
	/**
	 * Handle tasks when block changes
	 */
	void handleBlockChange(java.beans.PropertyChangeEvent e) {
		if ( (memory==null) && (memoryName!="") ) {
			memory = jmri.InstanceManager.memoryManagerInstance().
                            getMemory(memoryName);
		}
		if ( (memory!=null) && (block!=null) ) {
			Object val = block.getValue();
			if (val!=null) val = val.toString();
			memory.setValue(val);
		}				
		redrawLayoutBlockPanels();
	}
			
	/** 
	 * Deactivate block listener for redraw of panels and update of memories on 
	 *	change of state
	 */
	private void deactivateBlock() {
		if ( (mBlockListener!=null) && (block!=null) ) {
			block.removePropertyChangeListener(mBlockListener);
		}
		mBlockListener = null;
	}
			
	JmriJFrame editLayoutBlockFrame = null;
	Component callingPane;
	JTextField sensorNameField = new JTextField(16);
	JTextField memoryNameField = new JTextField(16);
    JComboBox senseBox = new JComboBox();
    int senseActiveIndex;
    int senseInactiveIndex;
    JComboBox trackColorBox = new JComboBox();
	JComboBox occupiedColorBox = new JComboBox();
	JLabel blockUseLabel= new JLabel( rb.getString("UseCount"));
	JButton blockEditDone;
	JButton blockEditCancel;
	boolean editOpen = false;

    /**
     * Edit a Layout Block 
     */
	protected void editLayoutBlock(Component callingPane) {
		if (editOpen) {
			editLayoutBlockFrame.setVisible(true);
			return;
		}
		if (editLayoutBlockFrame == null) {
            editLayoutBlockFrame = new JmriJFrame( rb.getString("EditBlock") );
            editLayoutBlockFrame.addHelpMenu("package.jmri.jmrit.display.EditLayoutBlock", true);
            editLayoutBlockFrame.setLocation(80,40);
            Container contentPane = editLayoutBlockFrame.getContentPane();        
            contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
			JPanel panel1 = new JPanel(); 
            panel1.setLayout(new FlowLayout());
			JLabel blockNameLabel = new JLabel( rb.getString("Name")+": "+blockName );
            panel1.add(blockNameLabel);
            contentPane.add(panel1);
			JPanel panel2 = new JPanel(); 
            panel2.setLayout(new FlowLayout());
            panel2.add(blockUseLabel);
            contentPane.add(panel2);
			contentPane.add(new JSeparator(JSeparator.HORIZONTAL));
			JPanel panel3 = new JPanel(); 
            panel3.setLayout(new FlowLayout());
			JLabel sensorLabel = new JLabel( rb.getString("OccupancySensor")+":");
            panel3.add(sensorLabel);
            panel3.add(sensorNameField);
            sensorNameField.setToolTipText( rb.getString("OccupancySensorToolTip") );
            contentPane.add(panel3);
			JPanel panel4 = new JPanel(); 
            panel4.setLayout(new FlowLayout());
			JLabel sensorSenseLabel = new JLabel( rb.getString("OccupiedSense")+":");
            panel4.add(sensorSenseLabel);
			senseBox.removeAllItems();
			senseBox.addItem( rb.getString("SensorActive") );
			senseActiveIndex = 0;
			senseBox.addItem( rb.getString("SensorInactive") );
			senseInactiveIndex = 1;
			panel4.add(senseBox);
            senseBox.setToolTipText( rb.getString("OccupiedSenseHint") );
            contentPane.add(panel4);
			contentPane.add(new JSeparator(JSeparator.HORIZONTAL));
			JPanel panel6 = new JPanel(); 
            panel6.setLayout(new FlowLayout());
			JLabel trackColorLabel = new JLabel( rb.getString("TrackColor") );
			panel6.add(trackColorLabel);
			initializeColorCombo(trackColorBox);
			panel6.add(trackColorBox);
            trackColorBox.setToolTipText( rb.getString("TrackColorHint") );
            contentPane.add(panel6);			
			JPanel panel7 = new JPanel(); 
            panel7.setLayout(new FlowLayout());
			JLabel occupiedColorLabel = new JLabel( rb.getString("OccupiedColor") );
			panel7.add(occupiedColorLabel);
			initializeColorCombo(occupiedColorBox);
			panel7.add(occupiedColorBox);
            occupiedColorBox.setToolTipText( rb.getString("OccupiedColorHint") );
            contentPane.add(panel7);
			contentPane.add(new JSeparator(JSeparator.HORIZONTAL));
			JPanel panel8 = new JPanel(); 
            panel8.setLayout(new FlowLayout());
			JLabel memoryLabel = new JLabel( rb.getString("MemoryVariable")+":");
            panel8.add(memoryLabel);
            panel8.add(memoryNameField);
            memoryNameField.setToolTipText( rb.getString("MemoryVariableTip") );
            contentPane.add(panel8);			
			contentPane.add(new JSeparator(JSeparator.HORIZONTAL));
            JPanel panel5 = new JPanel();
            panel5.setLayout(new FlowLayout());
            panel5.add(blockEditDone = new JButton(rb.getString("Done")));
            blockEditDone.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    blockEditDonePressed(e);
                }
            });
            blockEditDone.setToolTipText( rb.getString("DoneHint") );
            panel5.add(blockEditCancel = new JButton(rb.getString("Cancel")));
            blockEditCancel.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    blockEditCancelPressed(e);
                }
            });
            blockEditCancel.setToolTipText( rb.getString("CancelHint") );
            contentPane.add(panel5);		
		}
		blockUseLabel.setText(rb.getString("UseCount")+": "+useCount );
		sensorNameField.setText(occupancySensorName);
		if (occupiedSense==Sensor.ACTIVE) {
			senseBox.setSelectedIndex(senseActiveIndex);
		}
		else {
			senseBox.setSelectedIndex(senseInactiveIndex);
		}
		setColorCombo(trackColorBox,blockTrackColor);
		setColorCombo(occupiedColorBox,blockOccupiedColor);
		memoryNameField.setText(memoryName);
		editLayoutBlockFrame.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					blockEditCancelPressed(null);
				}
			});
        editLayoutBlockFrame.pack();
        editLayoutBlockFrame.setVisible(true);		
		editOpen = true;
	}	
	void blockEditDonePressed(ActionEvent a) {
		boolean needsRedraw = false;
		if ( !occupancySensorName.equals(sensorNameField.getText().trim()) ) {
			String newName = sensorNameField.getText().trim();
			if (validateSensor(newName,editLayoutBlockFrame)==null) {
				occupancySensor = null;
				occupancySensorName = "";
				sensorNameField.setText("");
			}
			else {
				sensorNameField.setText(newName);
				needsRedraw = true;
			}
		}
		int k = senseBox.getSelectedIndex();
		int oldSense = occupiedSense;
		if (k==senseActiveIndex) occupiedSense = Sensor.ACTIVE;
		else occupiedSense = Sensor.INACTIVE;
		if (oldSense!=occupiedSense) needsRedraw = true;
		Color oldColor = blockTrackColor;
		blockTrackColor = getSelectedColor(trackColorBox);
		if (oldColor!=blockTrackColor) needsRedraw = true;
		oldColor = blockOccupiedColor;
		blockOccupiedColor = getSelectedColor(occupiedColorBox);
		if (oldColor!=blockOccupiedColor) needsRedraw = true;
		if ( !memoryName.equals(memoryNameField.getText().trim()) ) {
			String newName = memoryNameField.getText().trim();
			if ((memory = validateMemory(newName,editLayoutBlockFrame))==null) {
				memoryName = "";
				memoryNameField.setText("");
			}
			else {
				memoryNameField.setText(memoryName);
				needsRedraw = true;
			}
		}
		editOpen = false;
		editLayoutBlockFrame.setVisible(false);
		if (needsRedraw) redrawLayoutBlockPanels();
	}
	void blockEditCancelPressed(ActionEvent a) {
		editOpen = false;
		editLayoutBlockFrame.setVisible(false);
	}
	
	/** 
	 * Methods and data to support initialization of color Combo box
	 */
	String[] colorText = {"Black","DarkGray","Gray", 
			"LightGray","White","Red","Pink","Orange",
			"Yellow","Green","Blue","Magenta","Cyan"};
	Color[] colorCode = {Color.black,Color.darkGray,Color.gray,
			Color.lightGray,Color.white,Color.red,Color.pink,Color.orange,
			Color.yellow,Color.green,Color.blue,Color.magenta,Color.cyan};
	private void initializeColorCombo(JComboBox colorCombo) {
		colorCombo.removeAllItems();
		for (int i = 0;i<numColors;i++) {
			colorCombo.addItem( rb.getString(colorText[i]) );
		}
	}
	private void setColorCombo(JComboBox colorCombo,Color color) {
		for (int i = 0;i<numColors;i++) {
			if (color==colorCode[i]) {
				colorCombo.setSelectedIndex(i);
				return;
			}
		}
	}
	private Color getSelectedColor(JComboBox colorCombo) {
		return (colorCode[colorCombo.getSelectedIndex()]);
	}
	
	/**
	 * Utility methods for converting between string and color
	 * Note: These names are only used internally, so don't need a resource bundle
	 */
	public static String colorToString(Color color) {
		if(color == Color.black) return "black";
		else if (color == Color.darkGray) return "darkGray";
		else if (color == Color.gray) return "gray";
		else if (color == Color.lightGray) return "lightGray";
		else if (color == Color.white) return "white";
		else if (color == Color.red) return "red";
		else if (color == Color.pink) return "pink";
		else if (color == Color.orange) return "orange";
		else if (color == Color.yellow) return "yellow";
		else if (color == Color.green) return "green";
		else if (color == Color.blue) return "blue";
		else if (color == Color.magenta) return "magenta";
		else if (color == Color.cyan) return "cyan";
		log.error ("unknown color sent to colorToString");
		return "black";
	}
	public static Color stringToColor(String string) {
		if(string.equals("black")) return Color.black;
		else if (string.equals("darkGray")) return Color.darkGray;	
		else if (string.equals("gray")) return Color.gray;	
		else if (string.equals("lightGray")) return Color.lightGray;	
		else if (string.equals("white")) return Color.white;	
		else if (string.equals("red")) return Color.red;	
		else if (string.equals("pink")) return Color.pink;	
		else if (string.equals("orange")) return Color.orange;	
		else if (string.equals("yellow")) return Color.yellow;	
		else if (string.equals("green")) return Color.green;
		else if (string.equals("blue")) return Color.blue;	
		else if (string.equals("magenta")) return Color.magenta;	
		else if (string.equals("cyan")) return Color.cyan;	
		log.error("unknown color text '"+string+"' sent to stringToColor");
		return Color.black;
	}

    /**
     * Removes this object from display and persistance
     */
    void remove() {
		deactivateBlock();
        active = false;
    }

    boolean active = true;
    /**
     * "active" means that the object is still displayed, and should be stored.
     */
    public boolean isActive() {
        return active;
    }

    static org.apache.log4j.Category log = org.apache.log4j.Category.getInstance(LayoutBlock.class.getName());

}