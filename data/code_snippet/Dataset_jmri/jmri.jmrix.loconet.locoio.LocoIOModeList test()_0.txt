    private void test() {
        /**
         * This should go into a JUnit test
         */
        log.debug("Starting test sequence");
        for (int i=0; i <= modeList.size()-1; i++) {
            LocoIOMode m = (LocoIOMode)modeList.elementAt(i);

            int haderror = 0;
            for (i = 1; i <= 2047; i++) {
                int svA = m.getSV();
                int v1A = addressToValue1(m, i);
                int v2A = addressToValue2(m, i);

                log.debug(m.getFullMode() + "=> Address " + Integer.toHexString(i) +
                            " encodes into " +
                            LnConstants.OPC_NAME(m.getOpcode()) + " " +
                            Integer.toHexString(svA) + " " +
                            Integer.toHexString(v1A) + " " +
                            Integer.toHexString(v2A));

                LocoIOMode lim = getLocoIOModeFor(svA, v1A, v2A);
                if (lim == null) {
                    if (haderror == 0) log.error("Testing " + m.getFullMode() + "      ERROR:");
                    String err =
                            "    Could Not find mode for Packet: " +
                            Integer.toHexString(svA) + " " +
                            Integer.toHexString(v1A) + " " +
                            Integer.toHexString(v2A) + " <CHK>\n";
                    log.error(err);
                    haderror++;
                } else {
                    int decodedaddress = valuesToAddress(lim.getOpcode(), svA, v1A, v2A);
                    if ((i) != decodedaddress) {
                        if (haderror == 0) log.error("Testing " + m.getFullMode() + "      ERROR:");
                        String err =
                            "    Could Not Match Address: (" +
                            Integer.toHexString(i - 1) + "=>" +
                            Integer.toHexString(decodedaddress) + ") from " +
                            LnConstants.OPC_NAME(lim.getOpcode()) + " " +
                            Integer.toHexString(svA) + " " +
                            Integer.toHexString(v1A) + " " +
                            Integer.toHexString(v2A) + "[mask="+Integer.toHexString(lim.getV2()) + "]\n";
                    log.error(err);
                    haderror++;
                    }
                }
            }
            if (haderror == 0) {
                log.debug("Testing " + m.getFullMode() + "      **OK**");
            }
        }
        log.debug("Finished test sequence\n");
    }
